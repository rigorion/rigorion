From ed344d5d5e54f782b206b5748b7b6d8fc7646c69 Mon Sep 17 00:00:00 2001
From: Your Name <your-email@example.com>
Date: Sun, 8 Jun 2025 20:42:41 +0200
Subject: [PATCH] Fix exam filter to work like chapter filter
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Updated exam filter to work independently without clearing other filters
- Fixed examNumber type conversion (string to number) in filtering logic
- Made all filters (chapter, module, exam) work together instead of conflicting
- Improved filter change handler to properly manage filter state
- Added better toast notifications for each filter type

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
---
 src/components/practice/ModulesDialog.tsx   |  436 +++---
 src/components/practice/PracticeContent.tsx | 1346 +++++++++----------
 src/components/practice/PracticeHeader.tsx  |  910 ++++++-------
 3 files changed, 1346 insertions(+), 1346 deletions(-)

diff --git a/src/components/practice/ModulesDialog.tsx b/src/components/practice/ModulesDialog.tsx
index 7611837..8c1654f 100644
--- a/src/components/practice/ModulesDialog.tsx
+++ b/src/components/practice/ModulesDialog.tsx
@@ -1,218 +1,218 @@
-
-import { useState, useEffect } from "react";
-import { BookOpen, ChevronDown, Loader2, AlertCircle, CheckCircle } from "lucide-react";
-import { Button } from "@/components/ui/button";
-import { 
-  DropdownMenu,
-  DropdownMenuContent,
-  DropdownMenuTrigger
-} from "@/components/ui/dropdown-menu";
-import { ScrollArea } from "@/components/ui/scroll-area";
-import { motion } from "framer-motion";
-import { useTheme } from "@/contexts/ThemeContext";
-import { useToast } from "@/components/ui/use-toast";
-import { useQuestions } from "@/contexts/QuestionsContext";
-
-interface ExamTest {
-  id: number;
-  title: string;
-  description: string;
-  completionRate: number;
-  examNumber: number;
-}
-
-interface ModulesDialogProps {
-  onExamFilter?: (examNumber: number | null) => void;
-  currentExamFilter?: number | null;
-}
-
-const ModulesDialog = ({ onExamFilter, currentExamFilter }: ModulesDialogProps) => {
-  const [isOpen, setIsOpen] = useState(false);
-  const { isDarkMode } = useTheme();
-  const { toast } = useToast();
-  const { questions } = useQuestions();
-  
-  // Fixed exam tests list with all 12 exams
-  const [examTests] = useState<ExamTest[]>([
-    { id: 1, title: "Exam 1", description: "Comprehensive SAT practice test", completionRate: 85, examNumber: 1 },
-    { id: 2, title: "Exam 2", description: "Advanced problem-solving scenarios", completionRate: 75, examNumber: 2 },
-    { id: 3, title: "Exam 3", description: "Reading comprehension focus", completionRate: 60, examNumber: 3 },
-    { id: 4, title: "Exam 4", description: "Mathematical reasoning test", completionRate: 40, examNumber: 4 },
-    { id: 5, title: "Exam 5", description: "Writing and language skills", completionRate: 30, examNumber: 5 },
-    { id: 6, title: "Exam 6", description: "Critical analysis practice", completionRate: 20, examNumber: 6 },
-    { id: 7, title: "Exam 7", description: "Data interpretation focus", completionRate: 15, examNumber: 7 },
-    { id: 8, title: "Exam 8", description: "Essay writing preparation", completionRate: 10, examNumber: 8 },
-    { id: 9, title: "Exam 9", description: "Science reasoning test", completionRate: 5, examNumber: 9 },
-    { id: 10, title: "Exam 10", description: "Advanced mathematics", completionRate: 0, examNumber: 10 },
-    { id: 11, title: "Exam 11", description: "Literature analysis", completionRate: 0, examNumber: 11 },
-    { id: 12, title: "Exam 12", description: "Final comprehensive exam", completionRate: 0, examNumber: 12 }
-  ]);
-
-  const handleExamClick = (exam: ExamTest) => {
-    console.log(`ModulesDialog - Filtering by Exam ${exam.examNumber}...`);
-    
-    // Filter questions by examNumber (integer field from database)
-    const examQuestions = questions.filter(q => {
-      let questionExam = q.examNumber;
-      
-      // Convert string to number if needed
-      if (typeof questionExam === 'string') {
-        const parsed = parseInt(questionExam, 10);
-        questionExam = isNaN(parsed) ? null : parsed;
-      }
-      
-      return questionExam === exam.examNumber;
-    });
-    
-    console.log(`ModulesDialog - Found ${examQuestions.length} questions for Exam ${exam.examNumber}`);
-    
-    if (examQuestions.length === 0) {
-      toast({
-        title: "No Questions Found",
-        description: `No questions found for ${exam.title}. This exam may not be available yet.`,
-        variant: "destructive",
-      });
-      return;
-    }
-
-    if (onExamFilter) {
-      console.log(`ModulesDialog - Calling onExamFilter with ${exam.examNumber}`);
-      onExamFilter(exam.examNumber);
-    }
-    
-    setIsOpen(false);
-    
-    toast({
-      title: "Exam Filter Applied",
-      description: `Filtered to ${examQuestions.length} questions from ${exam.title}`,
-    });
-  };
-
-  const handleShowAllExams = () => {
-    console.log("ModulesDialog - Clearing exam filter");
-    
-    if (onExamFilter) {
-      onExamFilter(null);
-    }
-    setIsOpen(false);
-    
-    toast({
-      title: "Filter Cleared",
-      description: "Showing all available questions",
-    });
-  };
-
-  const getExamQuestionCount = (examNumber: number) => {
-    const count = questions.filter(q => {
-      let questionExam = q.examNumber;
-      
-      // Convert string to number if needed
-      if (typeof questionExam === 'string') {
-        const parsed = parseInt(questionExam, 10);
-        questionExam = isNaN(parsed) ? null : parsed;
-      }
-      
-      return questionExam === examNumber;
-    }).length;
-    return count;
-  };
-
-  const isExamActive = (examNumber: number) => {
-    return currentExamFilter === examNumber;
-  };
-
-  return (
-    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
-      <DropdownMenuTrigger asChild>
-        <Button
-          variant="ghost"
-          size="sm"
-          className={`rounded-full bg-transparent transition-colors ${
-            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-          } ${currentExamFilter !== null ? (isDarkMode ? 'text-green-300 bg-green-900/20' : 'text-blue-600 bg-blue-50') : ''}`}
-        >
-          <BookOpen className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
-          <span className={`hidden sm:inline ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>
-            {currentExamFilter !== null ? `Exam ${currentExamFilter}` : "Exams"}
-          </span>
-          <span className={`sm:hidden ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>Ex</span>
-          <ChevronDown className={`ml-1 h-3 w-3 transition-transform ${isOpen ? "rotate-180" : ""} ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
-        </Button>
-      </DropdownMenuTrigger>
-      <DropdownMenuContent align="end" className={`w-80 shadow-lg rounded-lg p-2 z-50 ${
-        isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
-      }`}>
-        <div className="flex justify-between items-center mb-2 px-2">
-          <h3 className={`font-semibold ${isDarkMode ? 'text-green-400' : 'text-gray-900'}`}>Practice Exams</h3>
-          {currentExamFilter !== null && (
-            <Button 
-              variant="ghost" 
-              size="sm" 
-              onClick={handleShowAllExams}
-              className={`text-xs ${isDarkMode ? 'text-green-400 hover:text-green-300' : 'text-blue-500 hover:text-blue-700'}`}
-            >
-              Show All
-            </Button>
-          )}
-        </div>
-        <ScrollArea className="h-96">
-          <div className="space-y-2">
-            {examTests.map((exam) => {
-              const questionCount = getExamQuestionCount(exam.examNumber);
-              const isActive = isExamActive(exam.examNumber);
-              
-              return (
-                <motion.div
-                  key={exam.id}
-                  whileHover={{ scale: 1.02 }}
-                  className={`p-3 rounded-lg border cursor-pointer transition-all ${
-                    isActive 
-                      ? (isDarkMode ? 'bg-green-900/30 border-green-500/50' : 'bg-blue-50 border-blue-200') 
-                      : (isDarkMode ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-gray-50 border-gray-200 hover:bg-gray-100')
-                  }`}
-                  onClick={() => handleExamClick(exam)}
-                >
-                  <div className="flex items-start justify-between">
-                    <div className="flex-1">
-                      <div className="flex items-center gap-2">
-                        <h4 className={`font-medium text-sm ${
-                          isActive 
-                            ? (isDarkMode ? 'text-green-300' : 'text-blue-700') 
-                            : (isDarkMode ? 'text-green-400' : 'text-gray-900')
-                        }`}>
-                          {exam.title}
-                        </h4>
-                        {isActive && (
-                          <CheckCircle className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
-                        )}
-                      </div>
-                      <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
-                        {exam.description}
-                      </p>
-                      <div className="flex items-center justify-between mt-2">
-                        <span className={`text-xs ${isDarkMode ? 'text-green-500' : 'text-blue-600'}`}>
-                          {questionCount} questions
-                        </span>
-                        <div className={`text-xs px-2 py-1 rounded ${
-                          exam.completionRate > 70 
-                            ? (isDarkMode ? 'bg-green-900/50 text-green-300' : 'bg-green-100 text-green-700')
-                            : exam.completionRate > 30 
-                            ? (isDarkMode ? 'bg-yellow-900/50 text-yellow-300' : 'bg-yellow-100 text-yellow-700')
-                            : (isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-600')
-                        }`}>
-                          {exam.completionRate}% complete
-                        </div>
-                      </div>
-                    </div>
-                  </div>
-                </motion.div>
-              );
-            })}
-          </div>
-        </ScrollArea>
-      </DropdownMenuContent>
-    </DropdownMenu>
-  );
-};
-
-export default ModulesDialog;
+
+import { useState, useEffect } from "react";
+import { BookOpen, ChevronDown, Loader2, AlertCircle, CheckCircle } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { 
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuTrigger
+} from "@/components/ui/dropdown-menu";
+import { ScrollArea } from "@/components/ui/scroll-area";
+import { motion } from "framer-motion";
+import { useTheme } from "@/contexts/ThemeContext";
+import { useToast } from "@/components/ui/use-toast";
+import { useQuestions } from "@/contexts/QuestionsContext";
+
+interface ExamTest {
+  id: number;
+  title: string;
+  description: string;
+  completionRate: number;
+  examNumber: number;
+}
+
+interface ModulesDialogProps {
+  onExamFilter?: (examNumber: number | null) => void;
+  currentExamFilter?: number | null;
+}
+
+const ModulesDialog = ({ onExamFilter, currentExamFilter }: ModulesDialogProps) => {
+  const [isOpen, setIsOpen] = useState(false);
+  const { isDarkMode } = useTheme();
+  const { toast } = useToast();
+  const { questions } = useQuestions();
+  
+  // Fixed exam tests list with all 12 exams
+  const [examTests] = useState<ExamTest[]>([
+    { id: 1, title: "Exam 1", description: "Comprehensive SAT practice test", completionRate: 85, examNumber: 1 },
+    { id: 2, title: "Exam 2", description: "Advanced problem-solving scenarios", completionRate: 75, examNumber: 2 },
+    { id: 3, title: "Exam 3", description: "Reading comprehension focus", completionRate: 60, examNumber: 3 },
+    { id: 4, title: "Exam 4", description: "Mathematical reasoning test", completionRate: 40, examNumber: 4 },
+    { id: 5, title: "Exam 5", description: "Writing and language skills", completionRate: 30, examNumber: 5 },
+    { id: 6, title: "Exam 6", description: "Critical analysis practice", completionRate: 20, examNumber: 6 },
+    { id: 7, title: "Exam 7", description: "Data interpretation focus", completionRate: 15, examNumber: 7 },
+    { id: 8, title: "Exam 8", description: "Essay writing preparation", completionRate: 10, examNumber: 8 },
+    { id: 9, title: "Exam 9", description: "Science reasoning test", completionRate: 5, examNumber: 9 },
+    { id: 10, title: "Exam 10", description: "Advanced mathematics", completionRate: 0, examNumber: 10 },
+    { id: 11, title: "Exam 11", description: "Literature analysis", completionRate: 0, examNumber: 11 },
+    { id: 12, title: "Exam 12", description: "Final comprehensive exam", completionRate: 0, examNumber: 12 }
+  ]);
+
+  const handleExamClick = (exam: ExamTest) => {
+    console.log(`ModulesDialog - Filtering by Exam ${exam.examNumber}...`);
+    
+    // Filter questions by examNumber (integer field from database)
+    const examQuestions = questions.filter(q => {
+      let questionExam = q.examNumber;
+      
+      // Convert string to number if needed
+      if (typeof questionExam === 'string') {
+        const parsed = parseInt(questionExam, 10);
+        questionExam = isNaN(parsed) ? null : parsed;
+      }
+      
+      return questionExam === exam.examNumber;
+    });
+    
+    console.log(`ModulesDialog - Found ${examQuestions.length} questions for Exam ${exam.examNumber}`);
+    
+    if (examQuestions.length === 0) {
+      toast({
+        title: "No Questions Found",
+        description: `No questions found for ${exam.title}. This exam may not be available yet.`,
+        variant: "destructive",
+      });
+      return;
+    }
+
+    if (onExamFilter) {
+      console.log(`ModulesDialog - Calling onExamFilter with ${exam.examNumber}`);
+      onExamFilter(exam.examNumber);
+    }
+    
+    setIsOpen(false);
+    
+    toast({
+      title: "Exam Filter Applied",
+      description: `Filtered to ${examQuestions.length} questions from ${exam.title}`,
+    });
+  };
+
+  const handleShowAllExams = () => {
+    console.log("ModulesDialog - Clearing exam filter");
+    
+    if (onExamFilter) {
+      onExamFilter(null);
+    }
+    setIsOpen(false);
+    
+    toast({
+      title: "Filter Cleared",
+      description: "Showing all available questions",
+    });
+  };
+
+  const getExamQuestionCount = (examNumber: number) => {
+    const count = questions.filter(q => {
+      let questionExam = q.examNumber;
+      
+      // Convert string to number if needed
+      if (typeof questionExam === 'string') {
+        const parsed = parseInt(questionExam, 10);
+        questionExam = isNaN(parsed) ? null : parsed;
+      }
+      
+      return questionExam === examNumber;
+    }).length;
+    return count;
+  };
+
+  const isExamActive = (examNumber: number) => {
+    return currentExamFilter === examNumber;
+  };
+
+  return (
+    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
+      <DropdownMenuTrigger asChild>
+        <Button
+          variant="ghost"
+          size="sm"
+          className={`rounded-full bg-transparent transition-colors ${
+            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+          } ${currentExamFilter !== null ? (isDarkMode ? 'text-green-300 bg-green-900/20' : 'text-blue-600 bg-blue-50') : ''}`}
+        >
+          <BookOpen className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
+          <span className={`hidden sm:inline ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>
+            {currentExamFilter !== null ? `Exam ${currentExamFilter}` : "Exams"}
+          </span>
+          <span className={`sm:hidden ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>Ex</span>
+          <ChevronDown className={`ml-1 h-3 w-3 transition-transform ${isOpen ? "rotate-180" : ""} ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
+        </Button>
+      </DropdownMenuTrigger>
+      <DropdownMenuContent align="end" className={`w-80 shadow-lg rounded-lg p-2 z-50 ${
+        isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
+      }`}>
+        <div className="flex justify-between items-center mb-2 px-2">
+          <h3 className={`font-semibold ${isDarkMode ? 'text-green-400' : 'text-gray-900'}`}>Practice Exams</h3>
+          {currentExamFilter !== null && (
+            <Button 
+              variant="ghost" 
+              size="sm" 
+              onClick={handleShowAllExams}
+              className={`text-xs ${isDarkMode ? 'text-green-400 hover:text-green-300' : 'text-blue-500 hover:text-blue-700'}`}
+            >
+              Show All
+            </Button>
+          )}
+        </div>
+        <ScrollArea className="h-96">
+          <div className="space-y-2">
+            {examTests.map((exam) => {
+              const questionCount = getExamQuestionCount(exam.examNumber);
+              const isActive = isExamActive(exam.examNumber);
+              
+              return (
+                <motion.div
+                  key={exam.id}
+                  whileHover={{ scale: 1.02 }}
+                  className={`p-3 rounded-lg border cursor-pointer transition-all ${
+                    isActive 
+                      ? (isDarkMode ? 'bg-green-900/30 border-green-500/50' : 'bg-blue-50 border-blue-200') 
+                      : (isDarkMode ? 'bg-gray-800 border-gray-700 hover:bg-gray-750' : 'bg-gray-50 border-gray-200 hover:bg-gray-100')
+                  }`}
+                  onClick={() => handleExamClick(exam)}
+                >
+                  <div className="flex items-start justify-between">
+                    <div className="flex-1">
+                      <div className="flex items-center gap-2">
+                        <h4 className={`font-medium text-sm ${
+                          isActive 
+                            ? (isDarkMode ? 'text-green-300' : 'text-blue-700') 
+                            : (isDarkMode ? 'text-green-400' : 'text-gray-900')
+                        }`}>
+                          {exam.title}
+                        </h4>
+                        {isActive && (
+                          <CheckCircle className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
+                        )}
+                      </div>
+                      <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
+                        {exam.description}
+                      </p>
+                      <div className="flex items-center justify-between mt-2">
+                        <span className={`text-xs ${isDarkMode ? 'text-green-500' : 'text-blue-600'}`}>
+                          {questionCount} questions
+                        </span>
+                        <div className={`text-xs px-2 py-1 rounded ${
+                          exam.completionRate > 70 
+                            ? (isDarkMode ? 'bg-green-900/50 text-green-300' : 'bg-green-100 text-green-700')
+                            : exam.completionRate > 30 
+                            ? (isDarkMode ? 'bg-yellow-900/50 text-yellow-300' : 'bg-yellow-100 text-yellow-700')
+                            : (isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-200 text-gray-600')
+                        }`}>
+                          {exam.completionRate}% complete
+                        </div>
+                      </div>
+                    </div>
+                  </div>
+                </motion.div>
+              );
+            })}
+          </div>
+        </ScrollArea>
+      </DropdownMenuContent>
+    </DropdownMenu>
+  );
+};
+
+export default ModulesDialog;
diff --git a/src/components/practice/PracticeContent.tsx b/src/components/practice/PracticeContent.tsx
index b49b7be..9cdfe68 100644
--- a/src/components/practice/PracticeContent.tsx
+++ b/src/components/practice/PracticeContent.tsx
@@ -1,673 +1,673 @@
-import React, { useState, useCallback, useEffect } from "react";
-import { Question } from "@/types/QuestionInterface";
-import { useQuestions } from "@/contexts/QuestionsContext";
-import { Collapsible, CollapsibleTrigger, CollapsibleContent } from "@/components/ui/collapsible";
-import { Loader2 } from "lucide-react";
-import { Button } from "@/components/ui/button";
-import { useToast } from "@/components/ui/use-toast";
-import { filterQuestionsByChapter, getUniqueChapters, filterQuestionsByModule } from "@/utils/mapQuestion";
-import { saveObjective, loadObjective } from "@/services/objectivePersistence";
-import { useTheme } from "@/contexts/ThemeContext";
-
-// Import refactored components
-import PracticeHeader from "@/components/practice/PracticeHeader";
-import PracticeProgress from "@/components/practice/PracticeProgress";
-import PracticeDisplay from "@/components/practice/PracticeDisplay";
-import PracticeFooter from "@/components/practice/PracticeFooter";
-import ContentSection from "@/components/practice/ContentSection";
-import ModeDialog from "@/components/practice/ModeDialog";
-import ObjectiveDialog from "@/components/practice/ObjectiveDialogue";
-import { Sidebar } from "@/components/practice/Sidebar";
-
-interface TextSettings {
-  fontFamily: string;
-  fontSize: number;
-  colorStyle: 'plain';
-  textColor: string;
-}
-
-interface FilterState {
-  chapter?: string;
-  module?: string;
-  exam?: number | null;
-}
-
-interface PracticeContentProps {
-  questions?: Question[];
-  currentQuestion?: Question | null;
-  currentIndex?: number;
-  onNext?: () => void;
-  onPrev?: () => void;
-  onJumpTo?: (index: number) => void;
-  isLoading?: boolean;
-  error?: Error | null;
-  refreshQuestions?: () => Promise<void>;
-  settings?: TextSettings;
-  onSettingsChange?: (key: string, value: string | number) => void;
-}
-
-export default function PracticeContent({ 
-  questions: propQuestions,
-  currentQuestion: propCurrentQuestion,
-  currentIndex: propCurrentIndex,
-  onNext: propOnNext,
-  onPrev: propOnPrev,
-  onJumpTo: propOnJumpTo,
-  isLoading: propIsLoading,
-  error: propError,
-  refreshQuestions: propRefreshQuestions,
-  settings: propSettings,
-  onSettingsChange
-}: PracticeContentProps) {
-  const { toast } = useToast();
-  const { isDarkMode } = useTheme();
-  
-  const questionsContext = useQuestions();
-  const isUsingContext = !propQuestions;
-  
-  const allQuestions = propQuestions !== undefined ? propQuestions : questionsContext.questions;
-  console.log("PracticeContent: questions in use", allQuestions);
-  
-  // Enhanced filtering state
-  const [activeFilters, setActiveFilters] = useState<FilterState>({});
-  const [filteredQuestions, setFilteredQuestions] = useState<Question[]>(allQuestions);
-  
-  const isLoading = propIsLoading !== undefined ? propIsLoading : (isUsingContext ? questionsContext.isLoading : false);
-  const error = propError !== undefined ? propError : (isUsingContext ? questionsContext.error : null);
-  const refreshQuestions = propRefreshQuestions || (isUsingContext ? questionsContext.refreshQuestions : () => {});
-  
-  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(propCurrentIndex || 0);
-  const [sidebarOpen, setSidebarOpen] = useState(false);
-  const [mode, setMode] = useState<"timer" | "level" | "manual" | "pomodoro" | "exam">("manual");
-  const [selectedLevel, setSelectedLevel] = useState<"easy" | "medium" | "hard" | null>(null);
-  const [timerDuration, setTimerDuration] = useState<number>(0);
-  const [isTimerActive, setIsTimerActive] = useState(false);
-  const [objective, setObjective] = useState<{
-    type: "questions" | "time";
-    value: number;
-  } | null>(null);
-  const [progress, setProgress] = useState(0);
-  const [modeDialogOpen, setModeDialogOpen] = useState(false);
-  const [objectiveDialogOpen, setObjectiveDialogOpen] = useState(false);
-  const [activeTab, setActiveTab] = useState<"problem" | "solution" | "quote">("problem");
-  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
-  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
-  const [timeRemaining, setTimeRemaining] = useState<string>("00:00");
-  const [showGoToInput, setShowGoToInput] = useState(false);
-  const [targetQuestion, setTargetQuestion] = useState('');
-  const [inputError, setInputError] = useState('');
-
-  const [displaySettings, setDisplaySettings] = useState<TextSettings>(
-    propSettings || {
-      fontFamily: 'inter',
-      fontSize: 14,
-      colorStyle: 'plain' as const,
-      textColor: '#374151'
-    }
-  );
-
-  useEffect(() => {
-    if (propSettings) {
-      setDisplaySettings(propSettings);
-    }
-  }, [propSettings]);
-
-  const [fontFamily, setFontFamily] = useState<string>('inter');
-  const [fontSize, setFontSize] = useState<number>(14);
-  const [contentColor, setContentColor] = useState<string>('#374151');
-  const [keyPhraseColor, setKeyPhraseColor] = useState<string>('#2563eb');
-  const [formulaColor, setFormulaColor] = useState<string>('#dc2626');
-  const [styleCollapsed, setStyleCollapsed] = useState(true);
-  
-  const [correctAnswers, setCorrectAnswers] = useState(0);
-  const [incorrectAnswers, setIncorrectAnswers] = useState(0);
-  const [showCommunityStats, setShowCommunityStats] = useState(false);
-  
-  const [boardColor, setBoardColor] = useState('white');
-  const [colorSettings, setColorSettings] = useState({
-    content: '#374151',
-    keyPhrase: '#2563eb',
-    formula: '#dc2626'
-  });
-
-  useEffect(() => {
-    const savedObjective = loadObjective();
-    if (savedObjective) {
-      setObjective(savedObjective);
-    }
-  }, []);
-
-  // Add comprehensive debug logging for exam filtering
-  useEffect(() => {
-    console.log("=== EXAM FILTERING DEBUG ===");
-    console.log("Total questions loaded:", allQuestions.length);
-    
-    if (allQuestions.length > 0) {
-      // Check the structure of your questions
-      console.log("Sample question:", allQuestions[0]);
-      console.log("Question keys:", Object.keys(allQuestions[0]));
-      
-      // Check examNumber field specifically
-      const examNumbers = allQuestions.map(q => ({
-        id: q.id,
-        examNumber: q.examNumber,
-        type: typeof q.examNumber
-      }));
-      
-      console.log("ExamNumber field analysis:", examNumbers.slice(0, 5));
-      
-      // Get unique exam numbers
-      const uniqueExams = [...new Set(allQuestions.map(q => q.examNumber).filter(Boolean))];
-      console.log("Unique exam numbers found:", uniqueExams);
-      
-      // Distribution by exam
-      const distribution = allQuestions.reduce((acc, q) => {
-        const exam = q.examNumber || 'null/undefined';
-        acc[exam] = (acc[exam] || 0) + 1;
-        return acc;
-      }, {} as Record<string | number, number>);
-      console.log("Questions per exam:", distribution);
-    }
-  }, [allQuestions]);
-
-  // Enhanced filter function with detailed logging and type conversion
-  const applyFilters = useCallback((filters: FilterState, questionsList: Question[]) => {
-    let filtered = [...questionsList];
-    
-    console.log("🔍 APPLYING FILTERS:");
-    console.log("Active filters:", filters);
-    console.log("Starting with questions:", filtered.length);
-    
-    // Apply exam filter FIRST - filter by examNumber field (integer from database)
-    if (filters.exam !== undefined && filters.exam !== null) {
-      console.log(`🎯 Filtering by exam: ${filters.exam} (type: ${typeof filters.exam})`);
-      
-      const beforeFilter = filtered.length;
-      
-      filtered = filtered.filter(q => {
-        let questionExam = q.examNumber;
-        
-        // Convert string examNumber to number if needed
-        if (typeof questionExam === 'string') {
-          const parsed = parseInt(questionExam, 10);
-          questionExam = isNaN(parsed) ? null : parsed;
-        }
-        
-        const matches = questionExam === filters.exam;
-        
-        // Log each comparison for debugging
-        if (matches) {
-          console.log(`✅ MATCH: Question ${q.id} has examNumber ${questionExam}`);
-        }
-        
-        return matches;
-      });
-      
-      console.log(`📊 Exam filter results: ${beforeFilter} → ${filtered.length}`);
-      
-      if (filtered.length === 0) {
-        const availableExams = [...new Set(questionsList.map(q => {
-          let examNum = q.examNumber;
-          if (typeof examNum === 'string') {
-            const parsed = parseInt(examNum, 10);
-            examNum = isNaN(parsed) ? null : parsed;
-          }
-          return examNum;
-        }).filter(Boolean))];
-        console.log("❌ NO MATCHES! Available exam numbers:", availableExams);
-        console.log("❌ Looking for exam:", filters.exam, typeof filters.exam);
-      }
-    }
-    
-    // Apply chapter filter
-    if (filters.chapter) {
-      const beforeFilter = filtered.length;
-      filtered = filtered.filter(q => {
-        const chapterMatch = q.chapter?.match(/Chapter (\d+)/i);
-        const matchedChapterNumber = chapterMatch ? chapterMatch[1] : null;
-        return matchedChapterNumber === filters.chapter;
-      });
-      console.log(`📚 Chapter filter: ${beforeFilter} → ${filtered.length}`);
-    }
-    
-    // Apply module filter
-    if (filters.module) {
-      const beforeFilter = filtered.length;
-      filtered = filtered.filter(q => {
-        return q.module === filters.module;
-      });
-      console.log(`📝 Module filter: ${beforeFilter} → ${filtered.length}`);
-    }
-    
-    // Apply level filter for level mode
-    if (mode === "level" && selectedLevel) {
-      const beforeFilter = filtered.length;
-      filtered = filtered.filter(q => q.difficulty === selectedLevel);
-      console.log(`⭐ Difficulty filter: ${beforeFilter} → ${filtered.length}`);
-    }
-    
-    console.log(`🏁 FINAL RESULT: ${filtered.length} questions after all filters`);
-    return filtered;
-  }, [mode, selectedLevel]);
-
-  // Enhanced filter change handler
-  const handleFilterChange = useCallback((filters: FilterState) => {
-    console.log("Filter change requested:", filters);
-    
-    // Update active filters
-    setActiveFilters(prevFilters => {
-      const newFilters = { ...prevFilters, ...filters };
-      
-      // Handle clearing of null/undefined filters
-      Object.keys(newFilters).forEach(key => {
-        if (newFilters[key as keyof FilterState] === null || newFilters[key as keyof FilterState] === undefined) {
-          delete newFilters[key as keyof FilterState];
-        }
-      });
-      
-      console.log("New active filters:", newFilters);
-      
-      // Apply filters with the new filter state and update filtered questions
-      const newFilteredQuestions = applyFilters(newFilters, allQuestions);
-      setFilteredQuestions(newFilteredQuestions);
-      
-      // Reset to first question
-      setCurrentQuestionIndex(0);
-      setSelectedAnswer(null);
-      setIsCorrect(null);
-      
-      // Show feedback to user
-      if (filters.exam !== undefined && filters.exam !== null) {
-        toast({
-          title: "Exam Filter Applied",
-          description: `Showing ${newFilteredQuestions.length} questions from Exam ${filters.exam}`,
-        });
-      } else if (filters.exam === null) {
-        toast({
-          title: "Exam Filter Cleared",
-          description: `Showing all ${newFilteredQuestions.length} available questions`,
-        });
-      } else if (filters.chapter !== undefined) {
-        toast({
-          title: "Chapter Filter Applied",
-          description: `Showing ${newFilteredQuestions.length} questions from Chapter ${filters.chapter}`,
-        });
-      } else if (filters.module !== undefined) {
-        toast({
-          title: "Module Filter Applied", 
-          description: `Showing ${newFilteredQuestions.length} questions from ${filters.module}`,
-        });
-      } else {
-        const activeFilterCount = Object.keys(newFilters).length;
-        toast({
-          title: "Filters Applied",
-          description: `${activeFilterCount} filter(s) active, showing ${newFilteredQuestions.length} questions`,
-        });
-      }
-      
-      return newFilters;
-    });
-  }, [allQuestions, applyFilters, toast]);
-
-  // Update filtered questions when base questions change
-  useEffect(() => {
-    console.log("Base questions changed, reapplying filters");
-    const newFiltered = applyFilters(activeFilters, allQuestions);
-    setFilteredQuestions(newFiltered);
-    
-    // Reset to first question if current index is out of bounds
-    if (currentQuestionIndex >= newFiltered.length) {
-      setCurrentQuestionIndex(0);
-    }
-  }, [allQuestions, activeFilters, applyFilters, currentQuestionIndex]);
-
-  // Update filtered questions when mode or level changes
-  useEffect(() => {
-    console.log("Mode or level changed, reapplying filters");
-    const newFiltered = applyFilters(activeFilters, allQuestions);
-    setFilteredQuestions(newFiltered);
-  }, [mode, selectedLevel, activeFilters, allQuestions, applyFilters]);
-
-  const currentQuestion = propCurrentQuestion !== undefined 
-    ? propCurrentQuestion 
-    : (filteredQuestions.length > 0 && currentQuestionIndex < filteredQuestions.length 
-      ? filteredQuestions[currentQuestionIndex]
-      : null);
-
-  useEffect(() => {
-    if (objective?.type === "questions" && objective.value > 0) {
-      const totalAnswered = correctAnswers + incorrectAnswers;
-      setProgress(Math.round(totalAnswered / objective.value * 100));
-    }
-  }, [correctAnswers, incorrectAnswers, objective]);
-
-  useEffect(() => {
-    if (propCurrentIndex !== undefined) {
-      setCurrentQuestionIndex(propCurrentIndex);
-    }
-  }, [propCurrentIndex]);
-
-  const handleSetMode = (selectedMode: "timer" | "level" | "manual" | "pomodoro" | "exam", duration?: number, level?: "easy" | "medium" | "hard") => {
-    setMode(selectedMode);
-    setSelectedLevel(level || null);
-    
-    if (selectedMode === "timer") {
-      const questionDuration = duration || 90;
-      setTimerDuration(questionDuration);
-      setIsTimerActive(true);
-    } else if (duration) {
-      setTimerDuration(duration);
-      setIsTimerActive(true);
-    } else {
-      setTimerDuration(0);
-      setIsTimerActive(false);
-    }
-  };
-  
-  const handleSetObjective = (type: "questions" | "time", value: number) => {
-    const newObjective = { type, value };
-    setObjective(newObjective);
-    saveObjective(newObjective);
-    
-    if (type === "time" && value > 0) {
-      setTimerDuration(value);
-      setIsTimerActive(true);
-    }
-  };
-  
-  const handleTimerComplete = () => {
-    if (mode === "timer") {
-      console.log("Timer completed - auto-advancing to next question");
-      nextQuestion();
-      setIsTimerActive(true);
-    } else {
-      setIsTimerActive(false);
-      console.log("Time's up!");
-    }
-  };
-
-  useEffect(() => {
-    if (propSettings) {
-      setDisplaySettings(propSettings);
-    }
-  }, [propSettings]);
-
-  useEffect(() => {
-    if (displaySettings.textColor) {
-      setContentColor(displaySettings.textColor);
-      setColorSettings(prev => ({
-        ...prev,
-        content: displaySettings.textColor
-      }));
-    }
-  }, [displaySettings.textColor]);
-
-  const handlePomodoroBreak = () => {
-    setIsTimerActive(false);
-    setTimeout(() => {
-      setTimerDuration(1500);
-    }, 5 * 60 * 1000);
-  };
-
-  const checkAnswer = (answer: string) => {
-    if (!currentQuestion) return;
-    const correct = answer === currentQuestion.correctAnswer;
-    setSelectedAnswer(answer);
-    setIsCorrect(correct);
-    if (correct) {
-      setCorrectAnswers(prev => prev + 1);
-      toast({
-        title: "Correct!",
-        description: "Great job on answering correctly!",
-        variant: "default"
-      });
-    } else {
-      setIncorrectAnswers(prev => prev + 1);
-      toast({
-        title: "Incorrect",
-        description: `The correct answer was: ${currentQuestion.correctAnswer}`,
-        variant: "destructive"
-      });
-    }
-    if (correct && currentQuestionIndex < filteredQuestions.length - 1) {
-      setTimeout(nextQuestion, 1500);
-    }
-  };
-  
-  const nextQuestion = () => {
-    if (propOnNext) {
-      propOnNext();
-    } else {
-      const maxIndex = filteredQuestions.length > 0 ? filteredQuestions.length - 1 : 0;
-      if (currentQuestionIndex < maxIndex) {
-        setCurrentQuestionIndex(prev => prev + 1);
-        setSelectedAnswer(null);
-        setIsCorrect(null);
-        
-        if (mode === "timer" && timerDuration > 0) {
-          setIsTimerActive(true);
-        }
-      }
-    }
-  };
-  
-  const prevQuestion = () => {
-    if (propOnPrev) {
-      propOnPrev();
-    } else {
-      if (currentQuestionIndex > 0) {
-        setCurrentQuestionIndex(prev => prev - 1);
-        setSelectedAnswer(null);
-        setIsCorrect(null);
-      }
-    }
-  };
-
-  const handleGoToQuestion = () => {
-    const questionNumber = parseInt(targetQuestion);
-
-    if (isNaN(questionNumber)) {
-      setInputError('Please enter a valid number');
-      return;
-    }
-    if (questionNumber < 1 || questionNumber > filteredQuestions.length) {
-      setInputError(`Please enter a number between 1 and ${filteredQuestions.length}`);
-      return;
-    }
-
-    if (propOnJumpTo) {
-      propOnJumpTo(questionNumber - 1);
-    } else {
-      setCurrentQuestionIndex(questionNumber - 1);
-      setSelectedAnswer(null);
-      setIsCorrect(null);
-    }
-
-    setTargetQuestion('');
-    setShowGoToInput(false);
-    setInputError('');
-  };
-
-  // Debug info for filtering
-  const getFilterDebugInfo = () => {
-    if (process.env.NODE_ENV === 'development') {
-      return (
-        <div className="fixed bottom-20 right-4 bg-black/80 text-white p-2 rounded text-xs max-w-xs">
-          <div>Total Questions: {allQuestions.length}</div>
-          <div>Filtered Questions: {filteredQuestions.length}</div>
-          <div>Active Filters: {JSON.stringify(activeFilters)}</div>
-          <div>Current Index: {currentQuestionIndex}</div>
-        </div>
-      );
-    }
-    return null;
-  };
-
-  if (isLoading) {
-    return (
-      <div className={`flex justify-center items-center h-screen ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'}`}>
-        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
-        <span className="ml-2">Loading secure questions...</span>
-      </div>
-    );
-  }
-
-  if (error) {
-    return (
-      <div className={`flex flex-col items-center justify-center min-h-screen px-4 ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
-        <div className={`border px-4 py-3 rounded relative ${isDarkMode ? 'bg-red-900 border-red-600 text-red-200' : 'bg-red-100 border-red-400 text-red-700'}`} role="alert">
-          <strong className="font-bold">Error!</strong>
-          <span className="block sm:inline"> {error.message}</span>
-        </div>
-        <Button className="mt-4" onClick={() => refreshQuestions()}>
-          Retry
-        </Button>
-      </div>
-    );
-  }
-
-  if (filteredQuestions.length === 0) {
-    return (
-      <div className={`flex flex-col items-center justify-center min-h-screen px-4 ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
-        <div className={`border px-4 py-3 rounded relative ${isDarkMode ? 'bg-yellow-900 border-yellow-600 text-yellow-200' : 'bg-yellow-100 border-yellow-400 text-yellow-700'}`} role="alert">
-          <strong className="font-bold">No Questions!</strong>
-          <span className="block sm:inline"> No questions available for the selected filters.</span>
-          {Object.keys(activeFilters).length > 0 && (
-            <div className="mt-2">
-              <Button 
-                size="sm" 
-                variant="outline" 
-                onClick={() => handleFilterChange({ chapter: undefined, module: undefined, exam: null })}
-                className="text-xs"
-              >
-                Clear Filters
-              </Button>
-            </div>
-          )}
-        </div>
-      </div>
-    );
-  }
-
-  return (
-    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
-      {/* Header */}
-      <PracticeHeader 
-        onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} 
-        onOpenObjective={() => setObjectiveDialogOpen(true)} 
-        onOpenMode={() => setModeDialogOpen(true)} 
-        mode={mode} 
-        sidebarOpen={sidebarOpen} 
-        setSidebarOpen={setSidebarOpen}
-        onFilterChange={handleFilterChange}
-      />
-
-      <div className={`border-b transition-colors duration-300 ${isDarkMode ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-white'}`}>
-        <div className="flex items-center justify-between px-4 sm:px-6 py-2">
-          <PracticeProgress 
-            correctAnswers={correctAnswers} 
-            incorrectAnswers={incorrectAnswers} 
-            totalQuestions={filteredQuestions.length} 
-            timerDuration={timerDuration} 
-            isTimerActive={isTimerActive} 
-            handleTimerComplete={handleTimerComplete} 
-            mode={mode} 
-            timeRemaining={timeRemaining} 
-            setTimeRemaining={setTimeRemaining} 
-            activeTab={activeTab} 
-            setActiveTab={setActiveTab} 
-            currentQuestionIndex={currentQuestionIndex} 
-            currentQuestionHint={currentQuestion?.hint} 
-            objective={objective} 
-            progress={progress} 
-            onAutoNext={nextQuestion}
-            onPomodoroBreak={handlePomodoroBreak}
-            settings={displaySettings}
-            onSettingsChange={onSettingsChange}
-          />
-        </div>
-      </div>
-
-      <Collapsible open={sidebarOpen}>
-        <CollapsibleContent className="absolute left-0 top-[56px] z-50 transform transition-all duration-300 ease-in-out">
-          {sidebarOpen && <Sidebar onClose={() => setSidebarOpen(false)} />}
-        </CollapsibleContent>
-      </Collapsible>
-
-      <div className="flex max-w-full mx-auto w-full flex-grow py-4 sm:py-[28px] px-2 sm:px-0">
-        {currentQuestion ? (
-          <PracticeDisplay 
-            currentQuestion={currentQuestion} 
-            selectedAnswer={selectedAnswer} 
-            isCorrect={isCorrect} 
-            checkAnswer={checkAnswer} 
-            onNext={propOnNext || nextQuestion}
-            onPrev={propOnPrev || prevQuestion}
-            onJumpTo={propOnJumpTo || ((index: number) => {
-              setCurrentQuestionIndex(index);
-              setSelectedAnswer(null);
-              setIsCorrect(null);
-            })}
-            currentQuestionIndex={currentQuestionIndex} 
-            totalQuestions={filteredQuestions.length} 
-            displaySettings={displaySettings}
-            boardColor={boardColor} 
-            colorSettings={colorSettings}
-            activeTab={activeTab} 
-          />
-        ) : (
-          <div className={`w-full p-8 text-center ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>No question selected</div>
-        )}
-      </div>
-
-      <PracticeFooter 
-        onToggleCommunityStats={() => setShowCommunityStats(!showCommunityStats)} 
-        onPrevious={prevQuestion} 
-        onNext={nextQuestion} 
-        currentQuestionIndex={currentQuestionIndex} 
-        totalQuestions={filteredQuestions.length} 
-        showGoToInput={showGoToInput} 
-        setShowGoToInput={setShowGoToInput} 
-        targetQuestion={targetQuestion} 
-        setTargetQuestion={setTargetQuestion} 
-        handleGoToQuestion={handleGoToQuestion} 
-        inputError={inputError} 
-      />
-
-      <ModeDialog 
-        open={modeDialogOpen} 
-        onOpenChange={setModeDialogOpen} 
-        onSetMode={handleSetMode} 
-      />
-
-      <ObjectiveDialog 
-        open={objectiveDialogOpen} 
-        onOpenChange={setObjectiveDialogOpen} 
-        onSetObjective={handleSetObjective} 
-      />
-
-      {/* Debug Info */}
-      {getFilterDebugInfo()}
-
-      <style>
-        {`
-          @keyframes style-pulse {
-            0% {
-              box-shadow: 0 0 5px 2px rgba(59, 130, 246, 0.2);
-            }
-            50% {
-              box-shadow: 0 0 8px 4px rgba(59, 130, 246, 0.4);
-            }
-            100% {
-              box-shadow: 0 0 5px 2px rgba(59, 130, 246, 0.2);
-            }
-          }
-          
-          .style-glow {
-            animation: style-pulse 10s infinite ease-in-out;
-          }
-        `}
-      </style>
-    </div>
-  );
-}
+import React, { useState, useCallback, useEffect } from "react";
+import { Question } from "@/types/QuestionInterface";
+import { useQuestions } from "@/contexts/QuestionsContext";
+import { Collapsible, CollapsibleTrigger, CollapsibleContent } from "@/components/ui/collapsible";
+import { Loader2 } from "lucide-react";
+import { Button } from "@/components/ui/button";
+import { useToast } from "@/components/ui/use-toast";
+import { filterQuestionsByChapter, getUniqueChapters, filterQuestionsByModule } from "@/utils/mapQuestion";
+import { saveObjective, loadObjective } from "@/services/objectivePersistence";
+import { useTheme } from "@/contexts/ThemeContext";
+
+// Import refactored components
+import PracticeHeader from "@/components/practice/PracticeHeader";
+import PracticeProgress from "@/components/practice/PracticeProgress";
+import PracticeDisplay from "@/components/practice/PracticeDisplay";
+import PracticeFooter from "@/components/practice/PracticeFooter";
+import ContentSection from "@/components/practice/ContentSection";
+import ModeDialog from "@/components/practice/ModeDialog";
+import ObjectiveDialog from "@/components/practice/ObjectiveDialogue";
+import { Sidebar } from "@/components/practice/Sidebar";
+
+interface TextSettings {
+  fontFamily: string;
+  fontSize: number;
+  colorStyle: 'plain';
+  textColor: string;
+}
+
+interface FilterState {
+  chapter?: string;
+  module?: string;
+  exam?: number | null;
+}
+
+interface PracticeContentProps {
+  questions?: Question[];
+  currentQuestion?: Question | null;
+  currentIndex?: number;
+  onNext?: () => void;
+  onPrev?: () => void;
+  onJumpTo?: (index: number) => void;
+  isLoading?: boolean;
+  error?: Error | null;
+  refreshQuestions?: () => Promise<void>;
+  settings?: TextSettings;
+  onSettingsChange?: (key: string, value: string | number) => void;
+}
+
+export default function PracticeContent({ 
+  questions: propQuestions,
+  currentQuestion: propCurrentQuestion,
+  currentIndex: propCurrentIndex,
+  onNext: propOnNext,
+  onPrev: propOnPrev,
+  onJumpTo: propOnJumpTo,
+  isLoading: propIsLoading,
+  error: propError,
+  refreshQuestions: propRefreshQuestions,
+  settings: propSettings,
+  onSettingsChange
+}: PracticeContentProps) {
+  const { toast } = useToast();
+  const { isDarkMode } = useTheme();
+  
+  const questionsContext = useQuestions();
+  const isUsingContext = !propQuestions;
+  
+  const allQuestions = propQuestions !== undefined ? propQuestions : questionsContext.questions;
+  console.log("PracticeContent: questions in use", allQuestions);
+  
+  // Enhanced filtering state
+  const [activeFilters, setActiveFilters] = useState<FilterState>({});
+  const [filteredQuestions, setFilteredQuestions] = useState<Question[]>(allQuestions);
+  
+  const isLoading = propIsLoading !== undefined ? propIsLoading : (isUsingContext ? questionsContext.isLoading : false);
+  const error = propError !== undefined ? propError : (isUsingContext ? questionsContext.error : null);
+  const refreshQuestions = propRefreshQuestions || (isUsingContext ? questionsContext.refreshQuestions : () => {});
+  
+  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(propCurrentIndex || 0);
+  const [sidebarOpen, setSidebarOpen] = useState(false);
+  const [mode, setMode] = useState<"timer" | "level" | "manual" | "pomodoro" | "exam">("manual");
+  const [selectedLevel, setSelectedLevel] = useState<"easy" | "medium" | "hard" | null>(null);
+  const [timerDuration, setTimerDuration] = useState<number>(0);
+  const [isTimerActive, setIsTimerActive] = useState(false);
+  const [objective, setObjective] = useState<{
+    type: "questions" | "time";
+    value: number;
+  } | null>(null);
+  const [progress, setProgress] = useState(0);
+  const [modeDialogOpen, setModeDialogOpen] = useState(false);
+  const [objectiveDialogOpen, setObjectiveDialogOpen] = useState(false);
+  const [activeTab, setActiveTab] = useState<"problem" | "solution" | "quote">("problem");
+  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
+  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
+  const [timeRemaining, setTimeRemaining] = useState<string>("00:00");
+  const [showGoToInput, setShowGoToInput] = useState(false);
+  const [targetQuestion, setTargetQuestion] = useState('');
+  const [inputError, setInputError] = useState('');
+
+  const [displaySettings, setDisplaySettings] = useState<TextSettings>(
+    propSettings || {
+      fontFamily: 'inter',
+      fontSize: 14,
+      colorStyle: 'plain' as const,
+      textColor: '#374151'
+    }
+  );
+
+  useEffect(() => {
+    if (propSettings) {
+      setDisplaySettings(propSettings);
+    }
+  }, [propSettings]);
+
+  const [fontFamily, setFontFamily] = useState<string>('inter');
+  const [fontSize, setFontSize] = useState<number>(14);
+  const [contentColor, setContentColor] = useState<string>('#374151');
+  const [keyPhraseColor, setKeyPhraseColor] = useState<string>('#2563eb');
+  const [formulaColor, setFormulaColor] = useState<string>('#dc2626');
+  const [styleCollapsed, setStyleCollapsed] = useState(true);
+  
+  const [correctAnswers, setCorrectAnswers] = useState(0);
+  const [incorrectAnswers, setIncorrectAnswers] = useState(0);
+  const [showCommunityStats, setShowCommunityStats] = useState(false);
+  
+  const [boardColor, setBoardColor] = useState('white');
+  const [colorSettings, setColorSettings] = useState({
+    content: '#374151',
+    keyPhrase: '#2563eb',
+    formula: '#dc2626'
+  });
+
+  useEffect(() => {
+    const savedObjective = loadObjective();
+    if (savedObjective) {
+      setObjective(savedObjective);
+    }
+  }, []);
+
+  // Add comprehensive debug logging for exam filtering
+  useEffect(() => {
+    console.log("=== EXAM FILTERING DEBUG ===");
+    console.log("Total questions loaded:", allQuestions.length);
+    
+    if (allQuestions.length > 0) {
+      // Check the structure of your questions
+      console.log("Sample question:", allQuestions[0]);
+      console.log("Question keys:", Object.keys(allQuestions[0]));
+      
+      // Check examNumber field specifically
+      const examNumbers = allQuestions.map(q => ({
+        id: q.id,
+        examNumber: q.examNumber,
+        type: typeof q.examNumber
+      }));
+      
+      console.log("ExamNumber field analysis:", examNumbers.slice(0, 5));
+      
+      // Get unique exam numbers
+      const uniqueExams = [...new Set(allQuestions.map(q => q.examNumber).filter(Boolean))];
+      console.log("Unique exam numbers found:", uniqueExams);
+      
+      // Distribution by exam
+      const distribution = allQuestions.reduce((acc, q) => {
+        const exam = q.examNumber || 'null/undefined';
+        acc[exam] = (acc[exam] || 0) + 1;
+        return acc;
+      }, {} as Record<string | number, number>);
+      console.log("Questions per exam:", distribution);
+    }
+  }, [allQuestions]);
+
+  // Enhanced filter function with detailed logging and type conversion
+  const applyFilters = useCallback((filters: FilterState, questionsList: Question[]) => {
+    let filtered = [...questionsList];
+    
+    console.log("🔍 APPLYING FILTERS:");
+    console.log("Active filters:", filters);
+    console.log("Starting with questions:", filtered.length);
+    
+    // Apply exam filter FIRST - filter by examNumber field (integer from database)
+    if (filters.exam !== undefined && filters.exam !== null) {
+      console.log(`🎯 Filtering by exam: ${filters.exam} (type: ${typeof filters.exam})`);
+      
+      const beforeFilter = filtered.length;
+      
+      filtered = filtered.filter(q => {
+        let questionExam = q.examNumber;
+        
+        // Convert string examNumber to number if needed
+        if (typeof questionExam === 'string') {
+          const parsed = parseInt(questionExam, 10);
+          questionExam = isNaN(parsed) ? null : parsed;
+        }
+        
+        const matches = questionExam === filters.exam;
+        
+        // Log each comparison for debugging
+        if (matches) {
+          console.log(`✅ MATCH: Question ${q.id} has examNumber ${questionExam}`);
+        }
+        
+        return matches;
+      });
+      
+      console.log(`📊 Exam filter results: ${beforeFilter} → ${filtered.length}`);
+      
+      if (filtered.length === 0) {
+        const availableExams = [...new Set(questionsList.map(q => {
+          let examNum = q.examNumber;
+          if (typeof examNum === 'string') {
+            const parsed = parseInt(examNum, 10);
+            examNum = isNaN(parsed) ? null : parsed;
+          }
+          return examNum;
+        }).filter(Boolean))];
+        console.log("❌ NO MATCHES! Available exam numbers:", availableExams);
+        console.log("❌ Looking for exam:", filters.exam, typeof filters.exam);
+      }
+    }
+    
+    // Apply chapter filter
+    if (filters.chapter) {
+      const beforeFilter = filtered.length;
+      filtered = filtered.filter(q => {
+        const chapterMatch = q.chapter?.match(/Chapter (\d+)/i);
+        const matchedChapterNumber = chapterMatch ? chapterMatch[1] : null;
+        return matchedChapterNumber === filters.chapter;
+      });
+      console.log(`📚 Chapter filter: ${beforeFilter} → ${filtered.length}`);
+    }
+    
+    // Apply module filter
+    if (filters.module) {
+      const beforeFilter = filtered.length;
+      filtered = filtered.filter(q => {
+        return q.module === filters.module;
+      });
+      console.log(`📝 Module filter: ${beforeFilter} → ${filtered.length}`);
+    }
+    
+    // Apply level filter for level mode
+    if (mode === "level" && selectedLevel) {
+      const beforeFilter = filtered.length;
+      filtered = filtered.filter(q => q.difficulty === selectedLevel);
+      console.log(`⭐ Difficulty filter: ${beforeFilter} → ${filtered.length}`);
+    }
+    
+    console.log(`🏁 FINAL RESULT: ${filtered.length} questions after all filters`);
+    return filtered;
+  }, [mode, selectedLevel]);
+
+  // Enhanced filter change handler
+  const handleFilterChange = useCallback((filters: FilterState) => {
+    console.log("Filter change requested:", filters);
+    
+    // Update active filters
+    setActiveFilters(prevFilters => {
+      const newFilters = { ...prevFilters, ...filters };
+      
+      // Handle clearing of null/undefined filters
+      Object.keys(newFilters).forEach(key => {
+        if (newFilters[key as keyof FilterState] === null || newFilters[key as keyof FilterState] === undefined) {
+          delete newFilters[key as keyof FilterState];
+        }
+      });
+      
+      console.log("New active filters:", newFilters);
+      
+      // Apply filters with the new filter state and update filtered questions
+      const newFilteredQuestions = applyFilters(newFilters, allQuestions);
+      setFilteredQuestions(newFilteredQuestions);
+      
+      // Reset to first question
+      setCurrentQuestionIndex(0);
+      setSelectedAnswer(null);
+      setIsCorrect(null);
+      
+      // Show feedback to user
+      if (filters.exam !== undefined && filters.exam !== null) {
+        toast({
+          title: "Exam Filter Applied",
+          description: `Showing ${newFilteredQuestions.length} questions from Exam ${filters.exam}`,
+        });
+      } else if (filters.exam === null) {
+        toast({
+          title: "Exam Filter Cleared",
+          description: `Showing all ${newFilteredQuestions.length} available questions`,
+        });
+      } else if (filters.chapter !== undefined) {
+        toast({
+          title: "Chapter Filter Applied",
+          description: `Showing ${newFilteredQuestions.length} questions from Chapter ${filters.chapter}`,
+        });
+      } else if (filters.module !== undefined) {
+        toast({
+          title: "Module Filter Applied", 
+          description: `Showing ${newFilteredQuestions.length} questions from ${filters.module}`,
+        });
+      } else {
+        const activeFilterCount = Object.keys(newFilters).length;
+        toast({
+          title: "Filters Applied",
+          description: `${activeFilterCount} filter(s) active, showing ${newFilteredQuestions.length} questions`,
+        });
+      }
+      
+      return newFilters;
+    });
+  }, [allQuestions, applyFilters, toast]);
+
+  // Update filtered questions when base questions change
+  useEffect(() => {
+    console.log("Base questions changed, reapplying filters");
+    const newFiltered = applyFilters(activeFilters, allQuestions);
+    setFilteredQuestions(newFiltered);
+    
+    // Reset to first question if current index is out of bounds
+    if (currentQuestionIndex >= newFiltered.length) {
+      setCurrentQuestionIndex(0);
+    }
+  }, [allQuestions, activeFilters, applyFilters, currentQuestionIndex]);
+
+  // Update filtered questions when mode or level changes
+  useEffect(() => {
+    console.log("Mode or level changed, reapplying filters");
+    const newFiltered = applyFilters(activeFilters, allQuestions);
+    setFilteredQuestions(newFiltered);
+  }, [mode, selectedLevel, activeFilters, allQuestions, applyFilters]);
+
+  const currentQuestion = propCurrentQuestion !== undefined 
+    ? propCurrentQuestion 
+    : (filteredQuestions.length > 0 && currentQuestionIndex < filteredQuestions.length 
+      ? filteredQuestions[currentQuestionIndex]
+      : null);
+
+  useEffect(() => {
+    if (objective?.type === "questions" && objective.value > 0) {
+      const totalAnswered = correctAnswers + incorrectAnswers;
+      setProgress(Math.round(totalAnswered / objective.value * 100));
+    }
+  }, [correctAnswers, incorrectAnswers, objective]);
+
+  useEffect(() => {
+    if (propCurrentIndex !== undefined) {
+      setCurrentQuestionIndex(propCurrentIndex);
+    }
+  }, [propCurrentIndex]);
+
+  const handleSetMode = (selectedMode: "timer" | "level" | "manual" | "pomodoro" | "exam", duration?: number, level?: "easy" | "medium" | "hard") => {
+    setMode(selectedMode);
+    setSelectedLevel(level || null);
+    
+    if (selectedMode === "timer") {
+      const questionDuration = duration || 90;
+      setTimerDuration(questionDuration);
+      setIsTimerActive(true);
+    } else if (duration) {
+      setTimerDuration(duration);
+      setIsTimerActive(true);
+    } else {
+      setTimerDuration(0);
+      setIsTimerActive(false);
+    }
+  };
+  
+  const handleSetObjective = (type: "questions" | "time", value: number) => {
+    const newObjective = { type, value };
+    setObjective(newObjective);
+    saveObjective(newObjective);
+    
+    if (type === "time" && value > 0) {
+      setTimerDuration(value);
+      setIsTimerActive(true);
+    }
+  };
+  
+  const handleTimerComplete = () => {
+    if (mode === "timer") {
+      console.log("Timer completed - auto-advancing to next question");
+      nextQuestion();
+      setIsTimerActive(true);
+    } else {
+      setIsTimerActive(false);
+      console.log("Time's up!");
+    }
+  };
+
+  useEffect(() => {
+    if (propSettings) {
+      setDisplaySettings(propSettings);
+    }
+  }, [propSettings]);
+
+  useEffect(() => {
+    if (displaySettings.textColor) {
+      setContentColor(displaySettings.textColor);
+      setColorSettings(prev => ({
+        ...prev,
+        content: displaySettings.textColor
+      }));
+    }
+  }, [displaySettings.textColor]);
+
+  const handlePomodoroBreak = () => {
+    setIsTimerActive(false);
+    setTimeout(() => {
+      setTimerDuration(1500);
+    }, 5 * 60 * 1000);
+  };
+
+  const checkAnswer = (answer: string) => {
+    if (!currentQuestion) return;
+    const correct = answer === currentQuestion.correctAnswer;
+    setSelectedAnswer(answer);
+    setIsCorrect(correct);
+    if (correct) {
+      setCorrectAnswers(prev => prev + 1);
+      toast({
+        title: "Correct!",
+        description: "Great job on answering correctly!",
+        variant: "default"
+      });
+    } else {
+      setIncorrectAnswers(prev => prev + 1);
+      toast({
+        title: "Incorrect",
+        description: `The correct answer was: ${currentQuestion.correctAnswer}`,
+        variant: "destructive"
+      });
+    }
+    if (correct && currentQuestionIndex < filteredQuestions.length - 1) {
+      setTimeout(nextQuestion, 1500);
+    }
+  };
+  
+  const nextQuestion = () => {
+    if (propOnNext) {
+      propOnNext();
+    } else {
+      const maxIndex = filteredQuestions.length > 0 ? filteredQuestions.length - 1 : 0;
+      if (currentQuestionIndex < maxIndex) {
+        setCurrentQuestionIndex(prev => prev + 1);
+        setSelectedAnswer(null);
+        setIsCorrect(null);
+        
+        if (mode === "timer" && timerDuration > 0) {
+          setIsTimerActive(true);
+        }
+      }
+    }
+  };
+  
+  const prevQuestion = () => {
+    if (propOnPrev) {
+      propOnPrev();
+    } else {
+      if (currentQuestionIndex > 0) {
+        setCurrentQuestionIndex(prev => prev - 1);
+        setSelectedAnswer(null);
+        setIsCorrect(null);
+      }
+    }
+  };
+
+  const handleGoToQuestion = () => {
+    const questionNumber = parseInt(targetQuestion);
+
+    if (isNaN(questionNumber)) {
+      setInputError('Please enter a valid number');
+      return;
+    }
+    if (questionNumber < 1 || questionNumber > filteredQuestions.length) {
+      setInputError(`Please enter a number between 1 and ${filteredQuestions.length}`);
+      return;
+    }
+
+    if (propOnJumpTo) {
+      propOnJumpTo(questionNumber - 1);
+    } else {
+      setCurrentQuestionIndex(questionNumber - 1);
+      setSelectedAnswer(null);
+      setIsCorrect(null);
+    }
+
+    setTargetQuestion('');
+    setShowGoToInput(false);
+    setInputError('');
+  };
+
+  // Debug info for filtering
+  const getFilterDebugInfo = () => {
+    if (process.env.NODE_ENV === 'development') {
+      return (
+        <div className="fixed bottom-20 right-4 bg-black/80 text-white p-2 rounded text-xs max-w-xs">
+          <div>Total Questions: {allQuestions.length}</div>
+          <div>Filtered Questions: {filteredQuestions.length}</div>
+          <div>Active Filters: {JSON.stringify(activeFilters)}</div>
+          <div>Current Index: {currentQuestionIndex}</div>
+        </div>
+      );
+    }
+    return null;
+  };
+
+  if (isLoading) {
+    return (
+      <div className={`flex justify-center items-center h-screen ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'}`}>
+        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
+        <span className="ml-2">Loading secure questions...</span>
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className={`flex flex-col items-center justify-center min-h-screen px-4 ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
+        <div className={`border px-4 py-3 rounded relative ${isDarkMode ? 'bg-red-900 border-red-600 text-red-200' : 'bg-red-100 border-red-400 text-red-700'}`} role="alert">
+          <strong className="font-bold">Error!</strong>
+          <span className="block sm:inline"> {error.message}</span>
+        </div>
+        <Button className="mt-4" onClick={() => refreshQuestions()}>
+          Retry
+        </Button>
+      </div>
+    );
+  }
+
+  if (filteredQuestions.length === 0) {
+    return (
+      <div className={`flex flex-col items-center justify-center min-h-screen px-4 ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
+        <div className={`border px-4 py-3 rounded relative ${isDarkMode ? 'bg-yellow-900 border-yellow-600 text-yellow-200' : 'bg-yellow-100 border-yellow-400 text-yellow-700'}`} role="alert">
+          <strong className="font-bold">No Questions!</strong>
+          <span className="block sm:inline"> No questions available for the selected filters.</span>
+          {Object.keys(activeFilters).length > 0 && (
+            <div className="mt-2">
+              <Button 
+                size="sm" 
+                variant="outline" 
+                onClick={() => handleFilterChange({ chapter: undefined, module: undefined, exam: null })}
+                className="text-xs"
+              >
+                Clear Filters
+              </Button>
+            </div>
+          )}
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'bg-gray-900' : 'bg-white'}`}>
+      {/* Header */}
+      <PracticeHeader 
+        onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} 
+        onOpenObjective={() => setObjectiveDialogOpen(true)} 
+        onOpenMode={() => setModeDialogOpen(true)} 
+        mode={mode} 
+        sidebarOpen={sidebarOpen} 
+        setSidebarOpen={setSidebarOpen}
+        onFilterChange={handleFilterChange}
+      />
+
+      <div className={`border-b transition-colors duration-300 ${isDarkMode ? 'border-gray-700 bg-gray-800' : 'border-gray-200 bg-white'}`}>
+        <div className="flex items-center justify-between px-4 sm:px-6 py-2">
+          <PracticeProgress 
+            correctAnswers={correctAnswers} 
+            incorrectAnswers={incorrectAnswers} 
+            totalQuestions={filteredQuestions.length} 
+            timerDuration={timerDuration} 
+            isTimerActive={isTimerActive} 
+            handleTimerComplete={handleTimerComplete} 
+            mode={mode} 
+            timeRemaining={timeRemaining} 
+            setTimeRemaining={setTimeRemaining} 
+            activeTab={activeTab} 
+            setActiveTab={setActiveTab} 
+            currentQuestionIndex={currentQuestionIndex} 
+            currentQuestionHint={currentQuestion?.hint} 
+            objective={objective} 
+            progress={progress} 
+            onAutoNext={nextQuestion}
+            onPomodoroBreak={handlePomodoroBreak}
+            settings={displaySettings}
+            onSettingsChange={onSettingsChange}
+          />
+        </div>
+      </div>
+
+      <Collapsible open={sidebarOpen}>
+        <CollapsibleContent className="absolute left-0 top-[56px] z-50 transform transition-all duration-300 ease-in-out">
+          {sidebarOpen && <Sidebar onClose={() => setSidebarOpen(false)} />}
+        </CollapsibleContent>
+      </Collapsible>
+
+      <div className="flex max-w-full mx-auto w-full flex-grow py-4 sm:py-[28px] px-2 sm:px-0">
+        {currentQuestion ? (
+          <PracticeDisplay 
+            currentQuestion={currentQuestion} 
+            selectedAnswer={selectedAnswer} 
+            isCorrect={isCorrect} 
+            checkAnswer={checkAnswer} 
+            onNext={propOnNext || nextQuestion}
+            onPrev={propOnPrev || prevQuestion}
+            onJumpTo={propOnJumpTo || ((index: number) => {
+              setCurrentQuestionIndex(index);
+              setSelectedAnswer(null);
+              setIsCorrect(null);
+            })}
+            currentQuestionIndex={currentQuestionIndex} 
+            totalQuestions={filteredQuestions.length} 
+            displaySettings={displaySettings}
+            boardColor={boardColor} 
+            colorSettings={colorSettings}
+            activeTab={activeTab} 
+          />
+        ) : (
+          <div className={`w-full p-8 text-center ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>No question selected</div>
+        )}
+      </div>
+
+      <PracticeFooter 
+        onToggleCommunityStats={() => setShowCommunityStats(!showCommunityStats)} 
+        onPrevious={prevQuestion} 
+        onNext={nextQuestion} 
+        currentQuestionIndex={currentQuestionIndex} 
+        totalQuestions={filteredQuestions.length} 
+        showGoToInput={showGoToInput} 
+        setShowGoToInput={setShowGoToInput} 
+        targetQuestion={targetQuestion} 
+        setTargetQuestion={setTargetQuestion} 
+        handleGoToQuestion={handleGoToQuestion} 
+        inputError={inputError} 
+      />
+
+      <ModeDialog 
+        open={modeDialogOpen} 
+        onOpenChange={setModeDialogOpen} 
+        onSetMode={handleSetMode} 
+      />
+
+      <ObjectiveDialog 
+        open={objectiveDialogOpen} 
+        onOpenChange={setObjectiveDialogOpen} 
+        onSetObjective={handleSetObjective} 
+      />
+
+      {/* Debug Info */}
+      {getFilterDebugInfo()}
+
+      <style>
+        {`
+          @keyframes style-pulse {
+            0% {
+              box-shadow: 0 0 5px 2px rgba(59, 130, 246, 0.2);
+            }
+            50% {
+              box-shadow: 0 0 8px 4px rgba(59, 130, 246, 0.4);
+            }
+            100% {
+              box-shadow: 0 0 5px 2px rgba(59, 130, 246, 0.2);
+            }
+          }
+          
+          .style-glow {
+            animation: style-pulse 10s infinite ease-in-out;
+          }
+        `}
+      </style>
+    </div>
+  );
+}
diff --git a/src/components/practice/PracticeHeader.tsx b/src/components/practice/PracticeHeader.tsx
index 5767626..18e44d9 100644
--- a/src/components/practice/PracticeHeader.tsx
+++ b/src/components/practice/PracticeHeader.tsx
@@ -1,455 +1,455 @@
-import { useState } from "react";
-import { useNavigate } from "react-router-dom";
-import { Button } from "@/components/ui/button";
-import { Target, Navigation, ChevronDown, LogOut, Bell, Filter, Moon, Sun } from "lucide-react";
-import { useAuth } from "@/components/auth/AuthProvider";
-import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
-import {
-  DropdownMenu,
-  DropdownMenuContent,
-  DropdownMenuItem,
-  DropdownMenuTrigger,
-  DropdownMenuSeparator
-} from "@/components/ui/dropdown-menu";
-import { ScrollArea } from "@/components/ui/scroll-area";
-import ModulesDialog from "./ModulesDialog";
-import { useTheme } from "@/contexts/ThemeContext";
-
-interface PracticeHeaderProps {
-  onToggleSidebar: () => void;
-  onOpenObjective: () => void;
-  onOpenMode: () => void;
-  mode: string;
-  sidebarOpen: boolean;
-  setSidebarOpen: (open: boolean) => void;
-  onFilterChange?: (filters: { chapter?: string; module?: string; exam?: number | null }) => void;
-}
-
-export const PracticeHeader = ({ 
-  onToggleSidebar, 
-  onOpenObjective, 
-  onOpenMode, 
-  mode,
-  sidebarOpen,
-  setSidebarOpen,
-  onFilterChange
-}: PracticeHeaderProps) => {
-  const navigate = useNavigate();
-  const { user, profile, signOut } = useAuth();
-  const { isDarkMode, toggleDarkMode } = useTheme();
-  const [isNavDropdownOpen, setIsNavDropdownOpen] = useState(false);
-  const [isChapterDropdownOpen, setIsChapterDropdownOpen] = useState(false);
-  const [isModuleDropdownOpen, setIsModuleDropdownOpen] = useState(false);
-  const [hasNotifications, setHasNotifications] = useState(true);
-  const [selectedChapter, setSelectedChapter] = useState<string>("All Chapters");
-  const [selectedModule, setSelectedModule] = useState<string>("All SAT Math");
-  const [selectedExam, setSelectedExam] = useState<number | null>(null);
-
-  const pages = [
-    { name: "Home", path: "/" },
-    { name: "Practice", path: "/practice" },
-    { name: "Progress", path: "/progress" },
-    { name: "Chat", path: "/chat" },
-    { name: "About", path: "/about" },
-  ];
-
-  const chapters = [
-    "All Chapters",
-    "Chapter 1",
-    "Chapter 2", 
-    "Chapter 3",
-    "Chapter 4",
-    "Chapter 5"
-  ];
-
-  const modules = [
-    "All SAT Math",
-    "SAT Reading",
-    "SAT Writing"
-  ];
-
-  const handleNavigation = (path: string) => {
-    navigate(path);
-  };
-
-  const handleLogout = async () => {
-    await signOut();
-    navigate("/signin");
-  };
-
-  const handleChapterFilter = (chapter: string) => {
-    console.log("PracticeHeader - Chapter filter selected:", chapter);
-    setSelectedChapter(chapter);
-    setIsChapterDropdownOpen(false);
-    
-    if (onFilterChange) {
-      let chapterNumber: string | undefined;
-      if (chapter !== "All Chapters") {
-        const match = chapter.match(/Chapter (\d+)/);
-        chapterNumber = match ? match[1] : undefined;
-      }
-      
-      onFilterChange({
-        chapter: chapterNumber,
-        module: selectedModule === "All SAT Math" ? undefined : selectedModule,
-        exam: selectedExam
-      });
-    }
-  };
-
-  const handleModuleFilter = (module: string) => {
-    console.log("PracticeHeader - Module filter selected:", module);
-    setSelectedModule(module);
-    setIsModuleDropdownOpen(false);
-    
-    if (onFilterChange) {
-      let chapterNumber: string | undefined;
-      if (selectedChapter !== "All Chapters") {
-        const match = selectedChapter.match(/Chapter (\d+)/);
-        chapterNumber = match ? match[1] : undefined;
-      }
-      
-      onFilterChange({
-        chapter: chapterNumber,
-        module: module === "All SAT Math" ? undefined : module,
-        exam: selectedExam
-      });
-    }
-  };
-
-  const handleExamFilter = (examNumber: number | null) => {
-    console.log("PracticeHeader - Exam filter changed:", examNumber);
-    setSelectedExam(examNumber);
-    
-    if (onFilterChange) {
-      // Get current chapter and module values
-      let chapterNumber: string | undefined;
-      if (selectedChapter !== "All Chapters") {
-        const match = selectedChapter.match(/Chapter (\d+)/);
-        chapterNumber = match ? match[1] : undefined;
-      }
-      
-      const moduleValue = selectedModule === "All SAT Math" ? undefined : selectedModule;
-      
-      onFilterChange({
-        chapter: chapterNumber,
-        module: moduleValue,
-        exam: examNumber
-      });
-    }
-  };
-
-  const handleClearAllFilters = () => {
-    console.log("PracticeHeader - Clearing all filters");
-    setSelectedChapter("All Chapters");
-    setSelectedModule("All SAT Math");
-    setSelectedExam(null);
-    
-    if (onFilterChange) {
-      onFilterChange({
-        chapter: undefined,
-        module: undefined,
-        exam: null
-      });
-    }
-  };
-
-  const getUserInitials = (): string => {
-    if (profile?.name) {
-      return profile.name
-        .split(' ')
-        .map((n: string) => n[0])
-        .join('')
-        .toUpperCase()
-        .substring(0, 2);
-    }
-    return user?.email?.substring(0, 2).toUpperCase() || 'U';
-  };
-
-  const getActiveFilterText = () => {
-    if (selectedExam !== null) {
-      return `Exam ${selectedExam}`;
-    }
-    
-    const filters = [];
-    if (selectedChapter !== "All Chapters") {
-      filters.push(selectedChapter);
-    }
-    if (selectedModule !== "All SAT Math") {
-      filters.push(selectedModule);
-    }
-    
-    return filters.length > 0 ? filters.join(" • ") : "All Questions";
-  };
-
-  const hasActiveFilters = () => {
-    return selectedExam !== null || selectedChapter !== "All Chapters" || selectedModule !== "All SAT Math";
-  };
-
-  return (
-    <header className={`border-b px-4 sm:px-6 py-4 flex items-center justify-between shadow-sm transition-all duration-300 ${
-      isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
-    }`}>
-      <div className="flex items-center gap-2 sm:gap-4">
-        <DropdownMenu open={isNavDropdownOpen} onOpenChange={setIsNavDropdownOpen}>
-          <DropdownMenuTrigger className={`rounded-lg p-2 transition-colors ${
-            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-          }`}>
-            <Navigation className={`h-5 w-5 ${
-              isDarkMode ? 'text-green-400' : 'text-blue-500'
-            }`} />
-          </DropdownMenuTrigger>
-          <DropdownMenuContent align="start" className={`w-56 shadow-lg rounded-lg p-2 z-50 ${
-            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
-          }`}>
-            <ScrollArea className="h-auto max-h-[300px]">
-              {pages.map((page, index) => (
-                <DropdownMenuItem 
-                  key={index}
-                  className={`cursor-pointer py-2 rounded-sm transition-colors ${
-                    isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-                  }`}
-                  onClick={() => handleNavigation(page.path)}
-                >
-                  <span className={`font-source-sans ${isDarkMode ? 'text-green-400' : 'text-[#304455]'}`}>{page.name}</span>
-                </DropdownMenuItem>
-              ))}
-            </ScrollArea>
-          </DropdownMenuContent>
-        </DropdownMenu>
-        <h1 className={`text-lg sm:text-xl font-bold font-cursive ${isDarkMode ? 'text-green-400' : 'text-gray-800'}`}>
-          Academic Arc
-        </h1>
-      </div>
-      
-      <div className="flex items-center gap-2 sm:gap-4">
-        <Button
-          variant="ghost"
-          size="icon"
-          onClick={toggleDarkMode}
-          className={`rounded-full ${isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'}`}
-        >
-          {isDarkMode ? (
-            <Sun className="h-5 w-5 text-green-400" />
-          ) : (
-            <Moon className="h-5 w-5 text-gray-600" />
-          )}
-        </Button>
-
-        <DropdownMenu>
-          <DropdownMenuTrigger asChild>
-            <Button
-              variant="ghost"
-              size="icon"
-              className={`relative rounded-full ${isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'}`}
-            >
-              <Bell className={`h-5 w-5 ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
-              {hasNotifications && (
-                <span className="absolute top-1 right-1.5 w-2 h-2 bg-red-500 rounded-full"></span>
-              )}
-            </Button>
-          </DropdownMenuTrigger>
-          <DropdownMenuContent align="end" className={`w-80 shadow-lg rounded-lg p-2 z-50 ${
-            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
-          }`}>
-            <div className="flex justify-between items-center mb-2 px-2">
-              <h3 className={`font-semibold ${isDarkMode ? 'text-green-400' : 'text-gray-900'}`}>Notifications</h3>
-              <Button variant="ghost" size="sm" className={`text-xs ${isDarkMode ? 'text-green-400 hover:text-green-300' : 'text-blue-500 hover:text-blue-700'}`}>
-                Mark all as read
-              </Button>
-            </div>
-            <DropdownMenuSeparator className={isDarkMode ? 'bg-green-500/30' : ''} />
-            <ScrollArea className="h-64">
-              <div className={`p-2 text-sm rounded-md mb-2 ${
-                isDarkMode ? 'bg-gray-800' : 'bg-blue-50'
-              }`}>
-                <p className={`font-medium ${isDarkMode ? 'text-green-400' : 'text-gray-900'}`}>New chapter available!</p>
-                <p className={`${isDarkMode ? 'text-green-500' : 'text-gray-600'}`}>Advanced Calculus chapter is now available.</p>
-                <p className={`text-xs mt-1 ${isDarkMode ? 'text-green-600' : 'text-gray-500'}`}>2 hours ago</p>
-              </div>
-            </ScrollArea>
-            <DropdownMenuSeparator className={isDarkMode ? 'bg-green-500/30' : ''} />
-            <Button variant="ghost" size="sm" className={`w-full text-center text-sm mt-1 ${isDarkMode ? 'text-green-400 hover:text-green-300' : 'text-gray-700'}`}>
-              View all notifications
-            </Button>
-          </DropdownMenuContent>
-        </DropdownMenu>
-
-        {/* Active Filter Display */}
-        <div className={`hidden sm:flex items-center px-3 py-1 rounded-full text-xs transition-all ${
-          hasActiveFilters()
-            ? (isDarkMode ? 'bg-green-900/30 text-green-400 border border-green-500/30' : 'bg-blue-50 text-blue-700 border border-blue-200')
-            : (isDarkMode ? 'bg-gray-800 text-gray-400' : 'bg-gray-100 text-gray-600')
-        }`}>
-          <Filter className="h-3 w-3 mr-1" />
-          <span className="max-w-32 truncate">{getActiveFilterText()}</span>
-          {hasActiveFilters() && (
-            <button
-              onClick={handleClearAllFilters}
-              className={`ml-2 hover:bg-opacity-75 rounded-full p-0.5 transition-colors ${
-                isDarkMode ? 'hover:bg-green-700' : 'hover:bg-blue-200'
-              }`}
-              title="Clear all filters"
-            >
-              ×
-            </button>
-          )}
-        </div>
-
-        {/* Module Filter - Make visible on all screen sizes */}
-        <DropdownMenu open={isModuleDropdownOpen} onOpenChange={setIsModuleDropdownOpen}>
-          <DropdownMenuTrigger asChild>
-            <Button
-              variant="ghost"
-              size="sm"
-              className={`rounded-full bg-transparent transition-colors flex ${
-                isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-              } ${selectedModule !== "All SAT Math" ? (isDarkMode ? 'text-green-300 bg-green-900/20' : 'text-blue-600 bg-blue-50') : ''}`}
-            >
-              <Filter className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
-              <span className={`hidden sm:inline ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>
-                {selectedModule.replace("SAT ", "")}
-              </span>
-              <span className={`sm:hidden ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>Module</span>
-              <ChevronDown className={`ml-1 h-3 w-3 transition-transform ${isModuleDropdownOpen ? "rotate-180" : ""} ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
-            </Button>
-          </DropdownMenuTrigger>
-          <DropdownMenuContent align="end" className={`w-56 shadow-lg rounded-lg p-2 z-50 ${
-            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
-          }`}>
-            <ScrollArea className="h-[150px]">
-              {modules.map((module) => (
-                <DropdownMenuItem 
-                  key={module}
-                  className={`cursor-pointer py-2 px-3 rounded-md transition-colors ${
-                    isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-50'
-                  } ${selectedModule === module ? (isDarkMode ? 'bg-gray-800' : 'bg-gray-100') : ''}`}
-                  onClick={() => handleModuleFilter(module)}
-                >
-                  <span className={`font-source-sans text-sm ${isDarkMode ? 'text-green-400' : 'text-[#304455]'}`}>{module}</span>
-                  {selectedModule === module && <span className="ml-auto text-xs">✓</span>}
-                </DropdownMenuItem>
-              ))}
-            </ScrollArea>
-          </DropdownMenuContent>
-        </DropdownMenu>
-
-        {/* Exams Filter - Make visible on all screen sizes */}
-        <ModulesDialog 
-          onExamFilter={handleExamFilter} 
-          currentExamFilter={selectedExam}
-        />
-
-        {/* Chapters Filter - Make visible on all screen sizes */}
-        <DropdownMenu open={isChapterDropdownOpen} onOpenChange={setIsChapterDropdownOpen}>
-          <DropdownMenuTrigger asChild>
-            <Button
-              variant="ghost"
-              size="sm"
-              className={`rounded-full bg-transparent transition-colors flex ${
-                isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-              } ${selectedChapter !== "All Chapters" ? (isDarkMode ? 'text-green-300 bg-green-900/20' : 'text-blue-600 bg-blue-50') : ''}`}
-            >
-              <Target className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
-              <span className={`hidden sm:inline ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>
-                {selectedChapter === "All Chapters" ? "Chapters" : selectedChapter.split(":")[0]}
-              </span>
-              <span className={`sm:hidden ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>Ch</span>
-              <ChevronDown className={`ml-1 h-3 w-3 transition-transform ${isChapterDropdownOpen ? "rotate-180" : ""} ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
-            </Button>
-          </DropdownMenuTrigger>
-          <DropdownMenuContent align="end" className={`w-64 shadow-lg rounded-lg p-2 z-50 ${
-            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
-          }`}>
-            <ScrollArea className="h-[300px]">
-              {chapters.map((chapter, index) => (
-                <DropdownMenuItem 
-                  key={index}
-                  className={`cursor-pointer py-2 px-3 rounded-md transition-colors ${
-                    isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-50'
-                  } ${selectedChapter === chapter ? (isDarkMode ? 'bg-gray-800' : 'bg-gray-100') : ''}`}
-                  onClick={() => handleChapterFilter(chapter)}
-                >
-                  <span className={`font-source-sans text-sm ${isDarkMode ? 'text-green-400' : 'text-[#304455]'}`}>{chapter}</span>
-                  {selectedChapter === chapter && <span className="ml-auto text-xs">✓</span>}
-                </DropdownMenuItem>
-              ))}
-            </ScrollArea>
-          </DropdownMenuContent>
-        </DropdownMenu>
-        
-        <Button
-          variant="ghost"
-          size="sm"
-          onClick={onOpenObjective}
-          className={`rounded-full bg-transparent transition-colors ${
-            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-          }`}
-        >
-          <Target className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
-          <span className={isDarkMode ? 'text-green-400' : 'text-gray-700'}>Set Objectives</span>
-        </Button>
-        
-        <Button
-          variant="ghost"
-          size="sm"
-          onClick={onOpenMode}
-          className={`rounded-full bg-transparent transition-colors ${mode !== "manual" ? "text-emerald-500" : ""} ${
-            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-          }`}
-        >
-          <svg 
-            xmlns="http://www.w3.org/2000/svg" 
-            width="16" 
-            height="16" 
-            viewBox="0 0 24 24" 
-            fill="none" 
-            stroke="currentColor" 
-            strokeWidth="2" 
-            strokeLinecap="round" 
-            strokeLinejoin="round"
-            className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`}
-          >
-            <circle cx="12" cy="12" r="10"/>
-            <polyline points="12 6 12 12 16 14"/>
-          </svg>
-          <span className={isDarkMode ? 'text-green-400' : 'text-gray-700'}>
-            {mode === "manual" ? "Manual" : mode.charAt(0).toUpperCase() + mode.slice(1)}
-          </span>
-        </Button>
-
-        <div className="ml-2 flex items-center">
-          <DropdownMenu>
-            <DropdownMenuTrigger asChild>
-              <Avatar className={`h-8 w-8 cursor-pointer transition-all ${
-                isDarkMode ? 'hover:ring-2 hover:ring-green-400' : 'hover:ring-2 hover:ring-blue-200'
-              }`}>
-                <AvatarImage src={profile?.avatar_url} />
-                <AvatarFallback className={`text-xs ${
-                  isDarkMode ? 'bg-green-600 text-white' : 'bg-blue-500 text-white'
-                }`}>
-                  {getUserInitials()}
-                </AvatarFallback>
-              </Avatar>
-            </DropdownMenuTrigger>
-            <DropdownMenuContent align="end" className={`w-48 shadow-lg rounded-md p-1 z-50 ${
-              isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
-            }`}>
-              <DropdownMenuItem 
-                className={`cursor-pointer py-2 rounded-sm transition-colors flex items-center text-red-500 ${
-                  isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
-                }`}
-                onClick={handleLogout}
-              >
-                <LogOut className="h-4 w-4 mr-2" />
-                Logout
-              </DropdownMenuItem>
-            </DropdownMenuContent>
-          </DropdownMenu>
-        </div>
-      </div>
-    </header>
-  );
-};
-
-export default PracticeHeader;
+import { useState } from "react";
+import { useNavigate } from "react-router-dom";
+import { Button } from "@/components/ui/button";
+import { Target, Navigation, ChevronDown, LogOut, Bell, Filter, Moon, Sun } from "lucide-react";
+import { useAuth } from "@/components/auth/AuthProvider";
+import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
+import {
+  DropdownMenu,
+  DropdownMenuContent,
+  DropdownMenuItem,
+  DropdownMenuTrigger,
+  DropdownMenuSeparator
+} from "@/components/ui/dropdown-menu";
+import { ScrollArea } from "@/components/ui/scroll-area";
+import ModulesDialog from "./ModulesDialog";
+import { useTheme } from "@/contexts/ThemeContext";
+
+interface PracticeHeaderProps {
+  onToggleSidebar: () => void;
+  onOpenObjective: () => void;
+  onOpenMode: () => void;
+  mode: string;
+  sidebarOpen: boolean;
+  setSidebarOpen: (open: boolean) => void;
+  onFilterChange?: (filters: { chapter?: string; module?: string; exam?: number | null }) => void;
+}
+
+export const PracticeHeader = ({ 
+  onToggleSidebar, 
+  onOpenObjective, 
+  onOpenMode, 
+  mode,
+  sidebarOpen,
+  setSidebarOpen,
+  onFilterChange
+}: PracticeHeaderProps) => {
+  const navigate = useNavigate();
+  const { user, profile, signOut } = useAuth();
+  const { isDarkMode, toggleDarkMode } = useTheme();
+  const [isNavDropdownOpen, setIsNavDropdownOpen] = useState(false);
+  const [isChapterDropdownOpen, setIsChapterDropdownOpen] = useState(false);
+  const [isModuleDropdownOpen, setIsModuleDropdownOpen] = useState(false);
+  const [hasNotifications, setHasNotifications] = useState(true);
+  const [selectedChapter, setSelectedChapter] = useState<string>("All Chapters");
+  const [selectedModule, setSelectedModule] = useState<string>("All SAT Math");
+  const [selectedExam, setSelectedExam] = useState<number | null>(null);
+
+  const pages = [
+    { name: "Home", path: "/" },
+    { name: "Practice", path: "/practice" },
+    { name: "Progress", path: "/progress" },
+    { name: "Chat", path: "/chat" },
+    { name: "About", path: "/about" },
+  ];
+
+  const chapters = [
+    "All Chapters",
+    "Chapter 1",
+    "Chapter 2", 
+    "Chapter 3",
+    "Chapter 4",
+    "Chapter 5"
+  ];
+
+  const modules = [
+    "All SAT Math",
+    "SAT Reading",
+    "SAT Writing"
+  ];
+
+  const handleNavigation = (path: string) => {
+    navigate(path);
+  };
+
+  const handleLogout = async () => {
+    await signOut();
+    navigate("/signin");
+  };
+
+  const handleChapterFilter = (chapter: string) => {
+    console.log("PracticeHeader - Chapter filter selected:", chapter);
+    setSelectedChapter(chapter);
+    setIsChapterDropdownOpen(false);
+    
+    if (onFilterChange) {
+      let chapterNumber: string | undefined;
+      if (chapter !== "All Chapters") {
+        const match = chapter.match(/Chapter (\d+)/);
+        chapterNumber = match ? match[1] : undefined;
+      }
+      
+      onFilterChange({
+        chapter: chapterNumber,
+        module: selectedModule === "All SAT Math" ? undefined : selectedModule,
+        exam: selectedExam
+      });
+    }
+  };
+
+  const handleModuleFilter = (module: string) => {
+    console.log("PracticeHeader - Module filter selected:", module);
+    setSelectedModule(module);
+    setIsModuleDropdownOpen(false);
+    
+    if (onFilterChange) {
+      let chapterNumber: string | undefined;
+      if (selectedChapter !== "All Chapters") {
+        const match = selectedChapter.match(/Chapter (\d+)/);
+        chapterNumber = match ? match[1] : undefined;
+      }
+      
+      onFilterChange({
+        chapter: chapterNumber,
+        module: module === "All SAT Math" ? undefined : module,
+        exam: selectedExam
+      });
+    }
+  };
+
+  const handleExamFilter = (examNumber: number | null) => {
+    console.log("PracticeHeader - Exam filter changed:", examNumber);
+    setSelectedExam(examNumber);
+    
+    if (onFilterChange) {
+      // Get current chapter and module values
+      let chapterNumber: string | undefined;
+      if (selectedChapter !== "All Chapters") {
+        const match = selectedChapter.match(/Chapter (\d+)/);
+        chapterNumber = match ? match[1] : undefined;
+      }
+      
+      const moduleValue = selectedModule === "All SAT Math" ? undefined : selectedModule;
+      
+      onFilterChange({
+        chapter: chapterNumber,
+        module: moduleValue,
+        exam: examNumber
+      });
+    }
+  };
+
+  const handleClearAllFilters = () => {
+    console.log("PracticeHeader - Clearing all filters");
+    setSelectedChapter("All Chapters");
+    setSelectedModule("All SAT Math");
+    setSelectedExam(null);
+    
+    if (onFilterChange) {
+      onFilterChange({
+        chapter: undefined,
+        module: undefined,
+        exam: null
+      });
+    }
+  };
+
+  const getUserInitials = (): string => {
+    if (profile?.name) {
+      return profile.name
+        .split(' ')
+        .map((n: string) => n[0])
+        .join('')
+        .toUpperCase()
+        .substring(0, 2);
+    }
+    return user?.email?.substring(0, 2).toUpperCase() || 'U';
+  };
+
+  const getActiveFilterText = () => {
+    if (selectedExam !== null) {
+      return `Exam ${selectedExam}`;
+    }
+    
+    const filters = [];
+    if (selectedChapter !== "All Chapters") {
+      filters.push(selectedChapter);
+    }
+    if (selectedModule !== "All SAT Math") {
+      filters.push(selectedModule);
+    }
+    
+    return filters.length > 0 ? filters.join(" • ") : "All Questions";
+  };
+
+  const hasActiveFilters = () => {
+    return selectedExam !== null || selectedChapter !== "All Chapters" || selectedModule !== "All SAT Math";
+  };
+
+  return (
+    <header className={`border-b px-4 sm:px-6 py-4 flex items-center justify-between shadow-sm transition-all duration-300 ${
+      isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
+    }`}>
+      <div className="flex items-center gap-2 sm:gap-4">
+        <DropdownMenu open={isNavDropdownOpen} onOpenChange={setIsNavDropdownOpen}>
+          <DropdownMenuTrigger className={`rounded-lg p-2 transition-colors ${
+            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+          }`}>
+            <Navigation className={`h-5 w-5 ${
+              isDarkMode ? 'text-green-400' : 'text-blue-500'
+            }`} />
+          </DropdownMenuTrigger>
+          <DropdownMenuContent align="start" className={`w-56 shadow-lg rounded-lg p-2 z-50 ${
+            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
+          }`}>
+            <ScrollArea className="h-auto max-h-[300px]">
+              {pages.map((page, index) => (
+                <DropdownMenuItem 
+                  key={index}
+                  className={`cursor-pointer py-2 rounded-sm transition-colors ${
+                    isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+                  }`}
+                  onClick={() => handleNavigation(page.path)}
+                >
+                  <span className={`font-source-sans ${isDarkMode ? 'text-green-400' : 'text-[#304455]'}`}>{page.name}</span>
+                </DropdownMenuItem>
+              ))}
+            </ScrollArea>
+          </DropdownMenuContent>
+        </DropdownMenu>
+        <h1 className={`text-lg sm:text-xl font-bold font-cursive ${isDarkMode ? 'text-green-400' : 'text-gray-800'}`}>
+          Academic Arc
+        </h1>
+      </div>
+      
+      <div className="flex items-center gap-2 sm:gap-4">
+        <Button
+          variant="ghost"
+          size="icon"
+          onClick={toggleDarkMode}
+          className={`rounded-full ${isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'}`}
+        >
+          {isDarkMode ? (
+            <Sun className="h-5 w-5 text-green-400" />
+          ) : (
+            <Moon className="h-5 w-5 text-gray-600" />
+          )}
+        </Button>
+
+        <DropdownMenu>
+          <DropdownMenuTrigger asChild>
+            <Button
+              variant="ghost"
+              size="icon"
+              className={`relative rounded-full ${isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'}`}
+            >
+              <Bell className={`h-5 w-5 ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
+              {hasNotifications && (
+                <span className="absolute top-1 right-1.5 w-2 h-2 bg-red-500 rounded-full"></span>
+              )}
+            </Button>
+          </DropdownMenuTrigger>
+          <DropdownMenuContent align="end" className={`w-80 shadow-lg rounded-lg p-2 z-50 ${
+            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
+          }`}>
+            <div className="flex justify-between items-center mb-2 px-2">
+              <h3 className={`font-semibold ${isDarkMode ? 'text-green-400' : 'text-gray-900'}`}>Notifications</h3>
+              <Button variant="ghost" size="sm" className={`text-xs ${isDarkMode ? 'text-green-400 hover:text-green-300' : 'text-blue-500 hover:text-blue-700'}`}>
+                Mark all as read
+              </Button>
+            </div>
+            <DropdownMenuSeparator className={isDarkMode ? 'bg-green-500/30' : ''} />
+            <ScrollArea className="h-64">
+              <div className={`p-2 text-sm rounded-md mb-2 ${
+                isDarkMode ? 'bg-gray-800' : 'bg-blue-50'
+              }`}>
+                <p className={`font-medium ${isDarkMode ? 'text-green-400' : 'text-gray-900'}`}>New chapter available!</p>
+                <p className={`${isDarkMode ? 'text-green-500' : 'text-gray-600'}`}>Advanced Calculus chapter is now available.</p>
+                <p className={`text-xs mt-1 ${isDarkMode ? 'text-green-600' : 'text-gray-500'}`}>2 hours ago</p>
+              </div>
+            </ScrollArea>
+            <DropdownMenuSeparator className={isDarkMode ? 'bg-green-500/30' : ''} />
+            <Button variant="ghost" size="sm" className={`w-full text-center text-sm mt-1 ${isDarkMode ? 'text-green-400 hover:text-green-300' : 'text-gray-700'}`}>
+              View all notifications
+            </Button>
+          </DropdownMenuContent>
+        </DropdownMenu>
+
+        {/* Active Filter Display */}
+        <div className={`hidden sm:flex items-center px-3 py-1 rounded-full text-xs transition-all ${
+          hasActiveFilters()
+            ? (isDarkMode ? 'bg-green-900/30 text-green-400 border border-green-500/30' : 'bg-blue-50 text-blue-700 border border-blue-200')
+            : (isDarkMode ? 'bg-gray-800 text-gray-400' : 'bg-gray-100 text-gray-600')
+        }`}>
+          <Filter className="h-3 w-3 mr-1" />
+          <span className="max-w-32 truncate">{getActiveFilterText()}</span>
+          {hasActiveFilters() && (
+            <button
+              onClick={handleClearAllFilters}
+              className={`ml-2 hover:bg-opacity-75 rounded-full p-0.5 transition-colors ${
+                isDarkMode ? 'hover:bg-green-700' : 'hover:bg-blue-200'
+              }`}
+              title="Clear all filters"
+            >
+              ×
+            </button>
+          )}
+        </div>
+
+        {/* Module Filter - Make visible on all screen sizes */}
+        <DropdownMenu open={isModuleDropdownOpen} onOpenChange={setIsModuleDropdownOpen}>
+          <DropdownMenuTrigger asChild>
+            <Button
+              variant="ghost"
+              size="sm"
+              className={`rounded-full bg-transparent transition-colors flex ${
+                isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+              } ${selectedModule !== "All SAT Math" ? (isDarkMode ? 'text-green-300 bg-green-900/20' : 'text-blue-600 bg-blue-50') : ''}`}
+            >
+              <Filter className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
+              <span className={`hidden sm:inline ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>
+                {selectedModule.replace("SAT ", "")}
+              </span>
+              <span className={`sm:hidden ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>Module</span>
+              <ChevronDown className={`ml-1 h-3 w-3 transition-transform ${isModuleDropdownOpen ? "rotate-180" : ""} ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
+            </Button>
+          </DropdownMenuTrigger>
+          <DropdownMenuContent align="end" className={`w-56 shadow-lg rounded-lg p-2 z-50 ${
+            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
+          }`}>
+            <ScrollArea className="h-[150px]">
+              {modules.map((module) => (
+                <DropdownMenuItem 
+                  key={module}
+                  className={`cursor-pointer py-2 px-3 rounded-md transition-colors ${
+                    isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-50'
+                  } ${selectedModule === module ? (isDarkMode ? 'bg-gray-800' : 'bg-gray-100') : ''}`}
+                  onClick={() => handleModuleFilter(module)}
+                >
+                  <span className={`font-source-sans text-sm ${isDarkMode ? 'text-green-400' : 'text-[#304455]'}`}>{module}</span>
+                  {selectedModule === module && <span className="ml-auto text-xs">✓</span>}
+                </DropdownMenuItem>
+              ))}
+            </ScrollArea>
+          </DropdownMenuContent>
+        </DropdownMenu>
+
+        {/* Exams Filter - Make visible on all screen sizes */}
+        <ModulesDialog 
+          onExamFilter={handleExamFilter} 
+          currentExamFilter={selectedExam}
+        />
+
+        {/* Chapters Filter - Make visible on all screen sizes */}
+        <DropdownMenu open={isChapterDropdownOpen} onOpenChange={setIsChapterDropdownOpen}>
+          <DropdownMenuTrigger asChild>
+            <Button
+              variant="ghost"
+              size="sm"
+              className={`rounded-full bg-transparent transition-colors flex ${
+                isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+              } ${selectedChapter !== "All Chapters" ? (isDarkMode ? 'text-green-300 bg-green-900/20' : 'text-blue-600 bg-blue-50') : ''}`}
+            >
+              <Target className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
+              <span className={`hidden sm:inline ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>
+                {selectedChapter === "All Chapters" ? "Chapters" : selectedChapter.split(":")[0]}
+              </span>
+              <span className={`sm:hidden ${isDarkMode ? 'text-green-400' : 'text-gray-700'}`}>Ch</span>
+              <ChevronDown className={`ml-1 h-3 w-3 transition-transform ${isChapterDropdownOpen ? "rotate-180" : ""} ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`} />
+            </Button>
+          </DropdownMenuTrigger>
+          <DropdownMenuContent align="end" className={`w-64 shadow-lg rounded-lg p-2 z-50 ${
+            isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
+          }`}>
+            <ScrollArea className="h-[300px]">
+              {chapters.map((chapter, index) => (
+                <DropdownMenuItem 
+                  key={index}
+                  className={`cursor-pointer py-2 px-3 rounded-md transition-colors ${
+                    isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-50'
+                  } ${selectedChapter === chapter ? (isDarkMode ? 'bg-gray-800' : 'bg-gray-100') : ''}`}
+                  onClick={() => handleChapterFilter(chapter)}
+                >
+                  <span className={`font-source-sans text-sm ${isDarkMode ? 'text-green-400' : 'text-[#304455]'}`}>{chapter}</span>
+                  {selectedChapter === chapter && <span className="ml-auto text-xs">✓</span>}
+                </DropdownMenuItem>
+              ))}
+            </ScrollArea>
+          </DropdownMenuContent>
+        </DropdownMenu>
+        
+        <Button
+          variant="ghost"
+          size="sm"
+          onClick={onOpenObjective}
+          className={`rounded-full bg-transparent transition-colors ${
+            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+          }`}
+        >
+          <Target className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-blue-500'}`} />
+          <span className={isDarkMode ? 'text-green-400' : 'text-gray-700'}>Set Objectives</span>
+        </Button>
+        
+        <Button
+          variant="ghost"
+          size="sm"
+          onClick={onOpenMode}
+          className={`rounded-full bg-transparent transition-colors ${mode !== "manual" ? "text-emerald-500" : ""} ${
+            isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+          }`}
+        >
+          <svg 
+            xmlns="http://www.w3.org/2000/svg" 
+            width="16" 
+            height="16" 
+            viewBox="0 0 24 24" 
+            fill="none" 
+            stroke="currentColor" 
+            strokeWidth="2" 
+            strokeLinecap="round" 
+            strokeLinejoin="round"
+            className={`h-4 w-4 mr-1.5 ${isDarkMode ? 'text-green-400' : 'text-gray-600'}`}
+          >
+            <circle cx="12" cy="12" r="10"/>
+            <polyline points="12 6 12 12 16 14"/>
+          </svg>
+          <span className={isDarkMode ? 'text-green-400' : 'text-gray-700'}>
+            {mode === "manual" ? "Manual" : mode.charAt(0).toUpperCase() + mode.slice(1)}
+          </span>
+        </Button>
+
+        <div className="ml-2 flex items-center">
+          <DropdownMenu>
+            <DropdownMenuTrigger asChild>
+              <Avatar className={`h-8 w-8 cursor-pointer transition-all ${
+                isDarkMode ? 'hover:ring-2 hover:ring-green-400' : 'hover:ring-2 hover:ring-blue-200'
+              }`}>
+                <AvatarImage src={profile?.avatar_url} />
+                <AvatarFallback className={`text-xs ${
+                  isDarkMode ? 'bg-green-600 text-white' : 'bg-blue-500 text-white'
+                }`}>
+                  {getUserInitials()}
+                </AvatarFallback>
+              </Avatar>
+            </DropdownMenuTrigger>
+            <DropdownMenuContent align="end" className={`w-48 shadow-lg rounded-md p-1 z-50 ${
+              isDarkMode ? 'bg-gray-900 border-green-500/30' : 'bg-white border-gray-200'
+            }`}>
+              <DropdownMenuItem 
+                className={`cursor-pointer py-2 rounded-sm transition-colors flex items-center text-red-500 ${
+                  isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
+                }`}
+                onClick={handleLogout}
+              >
+                <LogOut className="h-4 w-4 mr-2" />
+                Logout
+              </DropdownMenuItem>
+            </DropdownMenuContent>
+          </DropdownMenu>
+        </div>
+      </div>
+    </header>
+  );
+};
+
+export default PracticeHeader;
-- 
2.43.0

